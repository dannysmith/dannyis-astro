---
import { unfurl } from 'unfurl.js';
import NotionIcon from '../icons/NotionIcon.astro';

export interface Props {
  href: string;
  title?: string; // Allow manual title override
}

const { href, title: manualTitle } = Astro.props;

// Variables with defaults
let title = manualTitle || 'Notion Page';
let hasFavicon = false;
let faviconImageURL = '';
let emoji = '';

try {
  // Only fetch if no manual title provided
  if (!manualTitle) {
    const result = await unfurl(href);
    title = result.title?.trim() || 'Notion Page';

    // Clean title
    if (title?.endsWith('| Notion')) {
      title = title.slice(0, title.lastIndexOf('| Notion')).trim();
    }

    // Get faviconImageURL or emoji
    const faviconURL = result.favicon;

    if (faviconURL && faviconURL.includes('amazonaws.com')) {
      hasFavicon = true;
      faviconImageURL = faviconURL;
    } else {
      const decodedURL = decodeURIComponent(faviconURL || '');

      // Regex pattern to match most common emojis
      const emojiRegex =
        /(\p{Emoji_Presentation}|\p{Emoji}\uFE0F|\u200D|\uFE0E|\uFE0F|\p{Extended_Pictographic})/gu;

      const matches = decodedURL.match(emojiRegex) as Array<string>;

      if (matches?.length > 0) {
        hasFavicon = true;
        emoji = matches[0];
      }
    }
  }
} catch (error) {
  console.warn(`Failed to fetch Notion page data for ${href}:`, error);
  // Fallback to manual title or default
  title = manualTitle || 'Notion Page';
}
---

<a class="notion-link" href={href} target="_blank" rel="noopener noreferrer">
  <span class="notion-icon">
    {!hasFavicon && <NotionIcon />}
    {
      hasFavicon && faviconImageURL && (
        <img
          class="icon-image"
          src={faviconImageURL}
          width="16"
          height="16"
          alt="Notion page icon"
          loading="lazy"
          decoding="async"
        />
      )
    }
    {hasFavicon && emoji && <span class="icon-emoji">{emoji}</span>}
    <svg class="icon-arrow" viewBox="0 0 13 13" aria-hidden="true">
      <path
        d="M6.30826 4.43292L1.76184 8.98454C1.76176 8.98462 1.76169 8.9847 1.76161 8.98477C1.76158 8.9848 1.76156 8.98482 1.76154 8.98484C1.46068 9.28584 1.25 9.6914 1.25 10.1565C1.25 10.6117 1.45865 11.0119 1.73417 11.2886C2.01014 11.5658 2.41107 11.7773 2.87078 11.7773C3.34169 11.7773 3.73758 11.5617 4.03477 11.2733L4.03482 11.2734L4.04244 11.2657L8.58864 6.72474V8.667C8.58864 9.51956 9.22729 10.2935 10.1521 10.2935C11.0528 10.2935 11.75 9.54534 11.75 8.66127V2.92671C11.75 2.48722 11.5981 2.06381 11.2838 1.74808C10.9689 1.43182 10.5446 1.27728 10.1006 1.27728H4.36028C3.46161 1.27728 2.72804 1.97749 2.72804 2.86942C2.72804 3.79734 3.51104 4.43292 4.35455 4.43292H6.30826Z"
        fill="currentColor"
        stroke="var(--notion-arrow-stroke-color)"
        stroke-width="1.5"></path>
    </svg>
  </span>
  <span class="title">{title}</span>
</a>

<style is:global></style>

<style>
  .notion-link {
    display: inline-flex;
    align-items: baseline;
    color: inherit;
    text-decoration: none;
    margin: 0 0.1em;
    transition: opacity 0.2s ease;
    vertical-align: baseline;
  }

  .notion-link:hover {
    opacity: var(--notion-hover-opacity);
  }

  .notion-icon {
    display: inline-flex;
    align-items: center;
    margin-right: 0.25em;
    width: 1em;
    height: 1em;
    position: relative;
    font-size: 0.9em;
    flex-shrink: 0;
  }

  .notion-icon:has(.icon-image) {
    width: 1.2em;
    height: 1.2em;
  }

  .icon-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 2px;
  }

  .icon-emoji {
    font-size: 1em;
    line-height: 1;
  }

  .icon-arrow {
    width: 0.6em;
    height: 0.6em;
    display: block;
    fill: var(--notion-arrow-color);
    flex-shrink: 0;
    position: absolute;
    right: -0.15em;
    bottom: -0.05em;
    stroke: var(--notion-arrow-stroke-color);
    stroke-width: 1.5;
    opacity: 0.7;
  }

  .title {
    border-bottom: 1px solid var(--notion-underline-color);
    line-height: 1.2;
  }
</style>
