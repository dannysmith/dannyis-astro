---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: string;
  height?: number;
  width?: number;
  bleed?: 'left' | 'right' | 'full';
  alt?: string;
  showAlt?: boolean;
  sourceUrl?: string;
  sourceTitle?: string;
  framed?: boolean;
}

const {
  src,
  height,
  width,
  bleed = null,
  alt = '',
  showAlt = false,
  sourceUrl,
  sourceTitle,
  framed = false,
} = Astro.props;

// Use glob import to get all images
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*');

// If src is a string and starts with "/assets", try to find it in the glob
const imageSrc =
  typeof src === 'string' && src.startsWith('/assets')
    ? (await images['/src' + src]()).default
    : src;

const isGif = typeof src === 'string' && src.toLowerCase().endsWith('.gif');

// For remote images without dimensions, provide reasonable defaults to prevent build errors
const isRemoteImage = typeof src === 'string' && (src.startsWith('http') || src.startsWith('/uploads'));
const defaultWidth = width || (isRemoteImage ? 800 : undefined);
const defaultHeight = height || (isRemoteImage ? 400 : undefined);
---

<figure
  class:list={[
    'container',
    { framed },
    { 'bleed-left': bleed === 'left' },
    { 'bleed-right': bleed === 'right' },
    { 'bleed-full': bleed === 'full' },
  ]}
>
  <div class:list={['image-wrapper']}>
    {
      isGif ? (
        <img
          src={typeof imageSrc === 'string' ? src : imageSrc.src}
          alt={alt}
          height={defaultHeight}
          width={defaultWidth}
          class="styled-image"
          loading="eager"
        />
      ) : (
        <Picture
          src={imageSrc as ImageMetadata}
          alt={alt}
          formats={['avif', 'webp', 'jpg']}
          height={defaultHeight}
          width={defaultWidth}
          class="styled-image"
          loading="eager"
          decoding="async"
        />
      )
    }
  </div>
  {
    showAlt &&
      (sourceUrl ? (
        <figcaption>
          {alt} (source: <a href={sourceUrl}>{sourceTitle}</a>)
        </figcaption>
      ) : (
        <figcaption>{alt}</figcaption>
      ))
  }
</figure>

<style>
  .container {
    grid-column: 2 / 3 !important;
    text-align: center;
    margin: 0 auto;
    max-width: inherit;
  }

  .image-wrapper {
    display: flex;
    justify-content: center;
    position: relative;
    width: 100%;
    margin: 0 auto;
    height: auto;
  }

  /* Pulse animation for while images are loading */
  .image-wrapper::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    border-radius: 0.2em;
    background-color: var(--color-text-primary);
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Don't show loading pulse for Mermaid diagrams (inline SVG data URIs) */
  .image-wrapper:has(img[src^='data:image/svg+xml'])::before {
    display: none;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 0.05;
    }
    50% {
      opacity: 0.3;
    }
  }

  .styled-image {
    height: auto;
    width: 100%;
    max-width: 100%;
    margin: 0 auto !important;
    border-radius: 0.2em;
    position: relative;
    z-index: 1;
    object-fit: contain;
    display: block;
  }

  .framed {
    border: 1px solid var(--color-border);
    border-radius: 0.2em;
    filter: var(--shadow-xsmall);
    contain: content;
    background: var(--color-bg-secondary);
  }

  .bleed-left {
    grid-column: 1 / 3 !important;
  }
  .bleed-right {
    grid-column: 2 / 4 !important;
  }

  .bleed-full {
    width: 100%;
    grid-column: 1 / 4 !important;
  }

  figcaption {
    font-family: var(--font-ui);
    width: 100%;
    margin: 0.5em auto;
  }
</style>
