---
interface Props {
  markdownUrl: string;
}

const { markdownUrl } = Astro.props;
---

<div class="markdown-actions">
  <a href="#" id="share-post" style="display: none;">share</a>
  <span id="share-separator" style="display: none;"> this post Â· </span>
  <a href="#" id="copy-markdown" data-url={markdownUrl}>copy</a>
  <span> / </span>
  <a href={markdownUrl} target="_blank">view</a>
  <span> as markdown</span>
</div>

<script>
  const copyLink = document.getElementById('copy-markdown');
  const shareLink = document.getElementById('share-post');
  const shareSeparator = document.getElementById('share-separator');

  async function copyMarkdown(url: string) {
    try {
      const response = await fetch(url);
      const markdown = await response.text();
      await navigator.clipboard.writeText(markdown);
      showFlashNotification('page copied as markdown to clipboard');
    } catch (err) {
      console.error('Failed to copy markdown:', err);
      alert('Failed to copy markdown to clipboard');
    }
  }

  async function sharePost() {
    try {
      await navigator.share({
        title: document.title,
        url: window.location.href,
      });
    } catch (err) {
      if (err instanceof Error && err.name !== 'AbortError') {
        console.error('Failed to share:', err);
      }
    }
  }

  function showFlashNotification(message: string) {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 1rem;
      right: 1rem;
      background: var(--color-brand-primary);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      z-index: 9999;
      animation: slideIn 0.3s ease-out forwards;
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease-out forwards';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  if (navigator.share && shareLink && shareSeparator) {
    shareLink.style.display = shareSeparator.style.display = 'inline';
    shareLink.addEventListener('click', (e) => {
      e.preventDefault();
      sharePost();
    });
  }

  if (copyLink) {
    copyLink.addEventListener('click', (e) => {
      e.preventDefault();
      const url = copyLink.getAttribute('data-url');
      if (url) copyMarkdown(url);
    });
  }
</script>

<style>
  .markdown-actions {
    margin-top: 2rem;
    color: var(--color-text-secondary);
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
</style>
