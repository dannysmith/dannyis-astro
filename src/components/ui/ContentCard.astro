---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import FormattedDate from './FormattedDate.astro';
import { generateSummary } from '@utils/content-summary';

export interface Props {
  content: CollectionEntry<'articles'> | CollectionEntry<'notes'>;
  variant?: 'compact' | 'standard';
  showSummary?: boolean;
  summaryLength?: number;
}

const { 
  content, 
  variant = 'standard', 
  showSummary = true, 
  summaryLength = 200 
} = Astro.props;

const { data, id, collection } = content;
const { title, pubDate, tags = [] } = data;

// Extract cover and coverAlt for articles only
const cover = 'cover' in data ? data.cover : undefined;
const coverAlt = 'coverAlt' in data ? data.coverAlt : undefined;

// Generate content URL based on collection  
const slug = data.slug || id.replace(/\.(md|mdx)$/, '');
const contentUrl = collection === 'articles' ? `/writing/${slug}/` : `/notes/${slug}/`;

// Generate summary if requested
const summary = showSummary ? generateSummary(content, summaryLength) : null;

// Determine content type for styling
const contentType = collection === 'articles' ? 'article' : 'note';
const typeLabel = collection === 'articles' ? 'Article' : 'Note';
const typeIcon = collection === 'articles' ? 'üìñ' : 'üìù';
---

<article class={`content-card cq ${variant}`} data-type={contentType}>
  <a href={contentUrl} class="card-link">
    <header class="card-header">
      <div class="card-meta">
        <span class="content-type">
          <span class="type-icon" aria-hidden="true">{typeIcon}</span>
          <span class="type-label">{typeLabel}</span>
        </span>
        <time class="date" datetime={pubDate.toISOString()}>
          <FormattedDate date={pubDate} />
        </time>
      </div>
      <h2 class="card-title">{title}</h2>
    </header>

    {summary && (
      <div class="card-summary">
        <p>{summary}</p>
      </div>
    )}

    {cover && variant !== 'compact' && (
      <div class="card-image">
        <Image 
          src={cover} 
          alt={coverAlt || `Cover for ${title}`}
          width={120}
          height={80}
          loading="lazy"
        />
      </div>
    )}

    {tags.length > 0 && variant === 'standard' && (
      <footer class="card-footer">
        <div class="card-tags">
          {tags.slice(0, 3).map(tag => (
            <span class="tag">{tag}</span>
          ))}
          {tags.length > 3 && (
            <span class="tag-more">+{tags.length - 3}</span>
          )}
        </div>
      </footer>
    )}
  </a>
</article>

<style>
  .content-card {
    container-type: inline-size;
    background: var(--color-contentcard-bg);
    border: 1px solid var(--color-contentcard-border);
    border-radius: 8px;
    border-top: 4px solid var(--color-contentcard-article-accent);
    transition: all 0.2s ease;
    overflow: hidden;
  }

  .content-card[data-type="note"] {
    border-top-color: var(--color-contentcard-note-accent);
  }

  .content-card:hover {
    transform: translateY(-2px);
    filter: var(--shadow-medium);
  }

  .card-link {
    display: block;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }

  .card-header {
    margin-bottom: 1rem;
  }

  .card-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    font-size: 0.875rem;
  }

  .content-type {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-contentcard-meta);
    font-weight: 500;
  }

  .type-icon {
    font-size: 1rem;
  }

  .type-label {
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.75rem;
  }

  .date {
    color: var(--color-contentcard-meta);
    font-size: 0.75rem;
  }

  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.3;
    margin: 0;
    color: var(--color-text-primary);
  }

  .card-summary {
    margin-bottom: 1rem;
  }

  .card-summary p {
    margin: 0;
    color: var(--color-contentcard-summary);
    line-height: 1.5;
    font-size: 0.9rem;
  }

  .card-image {
    margin-bottom: 1rem;
  }

  .card-image img {
    width: 100%;
    height: auto;
    border-radius: 4px;
    object-fit: cover;
  }

  .card-footer {
    margin-top: auto;
  }

  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: var(--color-pill-bg);
    color: var(--color-pill-fg);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .tag-more {
    background: var(--color-contentcard-meta);
    color: var(--color-contentcard-bg);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* Compact variant */
  .content-card.compact .card-summary {
    display: none;
  }

  .content-card.compact .card-footer {
    display: none;
  }

  .content-card.compact .card-link {
    padding: 1rem;
  }

  .content-card.compact .card-title {
    font-size: 1.1rem;
  }

  /* Container queries for responsive behavior */
  @container (width < 300px) {
    .card-summary {
      display: none;
    }
    
    .card-image {
      display: none;
    }
    
    .card-footer {
      display: none;
    }
    
    .card-link {
      padding: 1rem;
    }
    
    .card-title {
      font-size: 1rem;
    }
  }

  @container (width > 400px) and (width < 600px) {
    .content-card.standard {
      display: grid;
      grid-template-columns: 1fr;
      gap: 0;
    }
    
    .card-image {
      max-width: 100px;
      align-self: start;
    }
  }

  @container (width > 600px) {
    .content-card.standard {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 1rem;
      align-items: start;
    }
    
    .card-image {
      grid-row: 1 / -1;
      width: 120px;
      height: 80px;
      margin: 0;
    }
    
    .card-image img {
      width: 120px;
      height: 80px;
    }
  }

  /* Media query fallbacks for older browsers */
  @media (max-width: 300px) {
    .card-summary {
      display: none;
    }
    
    .card-image {
      display: none;
    }
  }

  @media (min-width: 600px) {
    .content-card.standard .card-link {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 1rem;
      align-items: start;
    }
  }

  /* Focus and accessibility */
  .card-link:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .card-link:focus-visible {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }
</style>