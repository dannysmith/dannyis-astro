---
// Import the fonts and global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '@fontsource-variable/fira-code';
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
  image?: string; // If provided, use as OG image. Otherwise, use default static image.
  type?: string; // 'website' (default) or 'article'
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, image, type = 'website' } = Astro.props;

let description = Astro.props.description;
if (description) {
  description = description + ' | Danny Smith';
}

// Build the OG image URL
let ogImageUrl: string;
if (image) {
  ogImageUrl = new URL(image, Astro.url).toString();
} else {
  ogImageUrl = new URL('/og-default.png', Astro.url).toString();
}
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Icons -->
<link rel="icon" href="/favicon.ico" sizes="any" />
<link rel="icon" href="/favicon.svg" type="image/svg+xml" />
<link rel="apple-touch-icon" href="/icon.jpg" />

<!-- RSS -->
<link rel="alternate" type="application/rss+xml" href="/rss.xml" />

<!-- Identity etc -->
<link rel="pgpkey" href="/key.txt" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Danny Smith" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:site_name" content="danny.is" />
<meta property="og:locale" content="en_GB" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImageUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={ogImageUrl} />

<!-- Google Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=League+Spartan:wght@100..900&display=swap"
  rel="stylesheet"
/>

<!-- Theme Management Script (must be inline to prevent flash) -->
<script is:inline>
  (function () {
    // Theme management API
    const themes = ['auto', 'light', 'dark'];

    function getSystemTheme() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    function getStoredTheme() {
      try {
        return localStorage.getItem('theme');
      } catch {
        return null;
      }
    }

    function setStoredTheme(theme) {
      try {
        localStorage.setItem('theme', theme);
      } catch {
        // Silently fail if localStorage is not available
      }
    }

    function getResolvedTheme(theme = getCurrentTheme()) {
      return theme === 'auto' ? getSystemTheme() : theme;
    }

    function getCurrentTheme() {
      return getStoredTheme() || 'auto';
    }

    function applyTheme(resolvedTheme) {
      document.documentElement.setAttribute('data-theme', resolvedTheme);
      document.documentElement.style.colorScheme = resolvedTheme;
    }

    function setTheme(newTheme) {
      if (!themes.includes(newTheme)) return;

      setStoredTheme(newTheme);
      const resolvedTheme = getResolvedTheme(newTheme);
      applyTheme(resolvedTheme);

      // Dispatch custom event for components to listen to
      document.dispatchEvent(
        new CustomEvent('theme-changed', {
          detail: { theme: newTheme, resolvedTheme },
        })
      );
    }

    // Initialize theme on page load
    function initTheme() {
      const currentTheme = getCurrentTheme();
      const resolvedTheme = getResolvedTheme(currentTheme);
      applyTheme(resolvedTheme);
    }

    // Global API
    window.theme = {
      get current() {
        return getCurrentTheme();
      },
      get resolved() {
        return getResolvedTheme();
      },
      get system() {
        return getSystemTheme();
      },
      set: setTheme,
      themes,
    };

    // Initialize immediately
    initTheme();

    // Handle system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      if (getCurrentTheme() === 'auto') {
        applyTheme(getSystemTheme());
      }
    });

    // Handle ViewTransitions
    document.addEventListener('astro:after-swap', initTheme);
  })();
</script>
