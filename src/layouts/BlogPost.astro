---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import Spinner from '@components/Spinner.astro';
import BaseHead from '@components/BaseHead.astro';
import Footer from '@components/Footer.astro';
import FormattedDate from '@components/FormattedDate.astro';
import Lightbox from '@components/Lightbox.astro';
import MainNavigation from '@components/MainNavigation.astro';

type Props = CollectionEntry<'blog'>['data'] & { readingTime: string };
const {
  title,
  description,
  pubDate,
  updatedDate,
  cover,
  coverAlt,
  draft,
  redirectURL,
  platform,
  readingTime,
} = Astro.props;

// Build OG image path for this article
const ogImage = `/writing/${Astro.params.slug}/og-image.png`;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={title} description={description} type="article" image={ogImage} />
    {platform && redirectURL && <meta http-equiv="refresh" content={'0;url=' + redirectURL} />}
  </head>

  <body>
    <MainNavigation />
    {
      platform && redirectURL && (
        <div class="spinner-overlay">
          <Spinner size="5rem" />
        </div>
      )
    }
    <main>
      <article class="blog-article cq h-entry" itemscope itemtype="https://schema.org/Article">
        {
          cover && coverAlt && (
            <div class="hero-image">
              <Image src={cover} alt={coverAlt} layout="none" />
            </div>
          )
        }
        <div class="post-header">
          <div class="metadata">
            <FormattedDate date={pubDate} itemprop="datePublished" />
            {
              updatedDate && (
                <span class="last-updated-on">
                  (updated on <FormattedDate date={updatedDate} itemprop="dateModified" />)
                </span>
              )
            }
            {readingTime && <span class="reading-time">Â· {readingTime}</span>}
            {draft && <span class="draft-notice">ðŸš§ Draft</span>}
          </div>

          <h1 class="title p-name" itemprop="headline">{title}</h1>
        </div>
        <slot />
      </article>
    </main>

    <Footer />
    <Lightbox />
    <style>
      body {
        background-color: var(--color-article-bg);
        color: var(--color-text-primary);
      }
      .spinner-overlay {
        min-height: 100vh;
        display: grid;
        justify-content: center;
        align-content: center;
        background: var(--color-article-bg);
      }

      .metadata {
        font-size: 0.7em;
        color: var(--color-article-accent);
        font-family: var(--font-code);
        margin-top: 1rem;
      }

      .hero-image {
        grid-column: 1 / 4;
      }

      .hero-image img {
        width: 100%;
        object-fit: cover;
        aspect-ratio: 5 / 1;
      }

      @media (prefers-color-scheme: dark) {
        .hero-image img {
          filter: grayscale(70%);
        }
      }

      :root[data-theme='dark'] .hero-image img {
        filter: grayscale(70%);
      }

      .draft-notice {
        border: 2px solid var(--color-article-accent);
        color: var(--color-article-accent);
        font-family: var(--font-ui);
        padding: 8px 16px;
        border-radius: 4px;
        float: right;
      }
    </style>

    <script>
      document.querySelectorAll('a[data-footnote-ref]').forEach(el => {
        const elm = el as HTMLAnchorElement;
        const footnoteId = elm.getAttribute('href')?.slice(1);
        if (!footnoteId) return;
        const footnote = document.getElementById(footnoteId)?.children;

        const closestP = elm.closest('p');
        const inlineFootNoteContainer = document.createElement('div');
        inlineFootNoteContainer.classList.add('inline-footnote-container');
        inlineFootNoteContainer.style.display = 'none';
        if (footnote) {
          inlineFootNoteContainer.appendChild(footnote[0].cloneNode(true));
        }
        closestP?.insertAdjacentElement('afterend', inlineFootNoteContainer);

        elm.addEventListener('click', e => {
          e.preventDefault();
          inlineFootNoteContainer.style.display =
            inlineFootNoteContainer.style.display === 'none' ? 'block' : 'none';
        });
      });
    </script>
  </body>
</html>
