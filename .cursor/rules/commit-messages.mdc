---
description: Guidelines for writing clear and consistent commit messages
globs: ['**/*']
alwaysApply: true
---

# Commit Message Guidelines

## Purpose

Define a clear and consistent format for commit messages that makes it easy to understand what changes were made and why.

## Format

```
<type>: <subject>

<body>

<footer>
```

### Type

Use one of the following types:

- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation changes
- `style`: Changes that do not affect the meaning of the code (formatting, etc)
- `refactor`: Code changes that neither fix a bug nor add a feature
- `perf`: Performance improvements
- `test`: Adding or fixing tests
- `chore`: Changes to the build process or auxiliary tools

### Subject

- Use the imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize the first letter
- No dot (.) at the end
- Keep it under 50 characters
- Describe what and why, not how

### Body

- Wrap at 72 characters
- Use the imperative, present tense
- Include motivation for the change and contrasts with previous behavior

### Footer

- Reference any issues or pull requests
- Format: `Fixes #123` or `Closes #456`

## Examples

```
feat: add dark mode toggle

Adds a new button in the header to switch between light and dark themes.
Uses CSS variables for theming and persists user preference in localStorage.

Closes #123
```

```
fix: resolve image loading in note cards

Images were not loading properly in note cards due to incorrect path resolution.
Added proper path handling for both local and remote images.

Fixes #456
```

```
docs: update component guidelines

Updates the component guidelines to reflect current best practices and
implementation patterns. Adds examples from existing components.

Closes #789
```

## Best Practices

1. **Be Specific**

   - Clearly describe what changed
   - Explain why the change was made
   - Reference related issues or PRs

2. **Keep it Simple**

   - One logical change per commit
   - Use simple, clear language
   - Focus on the "what" and "why"

3. **Be Consistent**

   - Follow the format
   - Use the same tense
   - Maintain the same style

4. **Review Before Committing**
   - Check the message format
   - Verify the content is clear
   - Ensure all necessary information is included
