---
description: Guidelines for working with Astro in this project
globs: ['**/*.astro', '**/*.mdx']
alwaysApply: true
---
# Astro Guidelines

## Core Principles

1. **Zero JavaScript by Default**

   - Write components without client-side JavaScript when possible
   - Use Astro's built-in features for static content
   - Only add interactivity when necessary

2. **Content-First Approach**

   - Use Astro's content collections for type-safe content
   - Leverage MDX for enhanced markdown
   - Keep content separate from presentation

3. **Performance First**
   - Use Astro's image optimization
   - Minimize client-side JavaScript
   - Leverage static generation where possible

## Component Guidelines

### Astro Components

1. **Structure**

   ```astro
   ---
   // 1. Imports
   import { Image } from 'astro:assets';

   // 2. Props
   const { title, image } = Astro.props;

   // 3. Data fetching (if needed)
   const data = await fetchData();
   ---

   <!-- 4. Template -->
   <div class="component">
     <!-- Content -->
   </div>

   <!-- 5. Styles -->
   <style>
     /* Scoped styles */
   </style>
   ```

2. **Best Practices**
   - Keep components focused and single-purpose
   - Use scoped styles by default
   - Leverage Astro's built-in components
   - Use TypeScript for props

### MDX Components

1. **Usage**

   - Use for content that needs enhanced markdown
   - Keep custom components minimal
   - Document available components

2. **Available Components**
   - `<Callout>` - For highlighting important information
   - `<BookmarkCard>` - For rich link previews and URL cards
   - `<Notion>` - For Notion page references with automatic title fetching and optional manual override

## Content Collections

1. **Articles**

   - Use `src/content/articles/`
   - Required frontmatter:
     ```yaml
     title: string
     pubDate: date
     draft: boolean
     ```
   - Optional frontmatter:
     ```yaml
     updatedDate: date
     cover: image
     coverAlt: string
     description: string
     tags: string[]
     platform: "medium" | "external"
     redirectUrl: string
     ```

2. **Notes**
   - Use `src/content/notes/`
   - Required frontmatter:
     ```yaml
     pubDate: date
     ```
   - Optional frontmatter:
     ```yaml
     title: string
     url: string
     tags: string[]
     ```

## Image Handling

1. **Astro Image Component**

   ```astro
   <Image
     src={import('../assets/image.jpg')}
     alt="Description"
     width={800}
     height={600}
   />
   ```

2. **Best Practices**
   - Always provide width and height
   - Use descriptive alt text
   - Leverage Astro's image optimization
   - Use appropriate image formats

## Performance Guidelines

1. **Build Optimization**

   - Use static generation by default
   - Minimize client-side JavaScript
   - Optimize images with Astro's built-in tools

2. **Loading Performance**
   - Use `loading="lazy"` for below-fold images
   - Implement proper caching strategies
   - Minimize third-party dependencies

## SEO Guidelines

1. **Centralized SEO Configuration**

   - All SEO configuration is centralized in `src/config/seo.ts`
   - Personal branding, job titles, and site information configured once
   - Title templates for different page types (article, note, page)
   - Schema.org structured data configuration
   - OpenGraph and Twitter card configuration

2. **SEO Utility Functions**

   - Use utilities from `src/utils/seo.ts` for consistent SEO metadata generation
   - `generatePageTitle()` - Uses configured templates for consistent titles
   - `generateMetaDescription()` - Adds consistent branding to descriptions
   - `generateJSONLD()` - Creates comprehensive Schema.org structured data
   - `generateArticleMeta()` - Generates article-specific OpenGraph meta tags
   - `generateOGImageUrl()` - Handles image URL generation with fallbacks
   - `validateSEOData()` - Validates and sanitizes SEO data

3. **BaseHead Component Usage**

   ```astro
   <BaseHead
     title="Page Title"
     description="Page description"
     type="article"        // 'website' (default) or 'article'
     pageType="article"    // 'article', 'note', or 'page' (for title templates)
     image="/custom-og.png" // Optional: custom OG image
     pubDate={new Date()}   // Optional: for articles/notes
     updatedDate={new Date()} // Optional: for articles/notes
     tags={['tag1', 'tag2']} // Optional: for articles/notes
   />
   ```

4. **SEO Best Practices**

   - Update site-wide SEO settings in `src/config/seo.ts`
   - Use appropriate `pageType` for consistent title formatting
   - Provide meaningful descriptions for better search results
   - Use `type="article"` for content pages (articles/notes)
   - Leverage automatic OpenGraph image generation
   - All pages automatically include comprehensive structured data

5. **Theme Management**

   - Global `window.theme` API provides theme management
   - Supports auto/light/dark themes with system preference detection
   - Automatically handles ViewTransitions and theme persistence
   - Components can listen for `theme-changed` events
   - Theme switching handled by `ThemeToggle` component

6. **External Link Security**
   - All external links in markdown content automatically include `target="_blank" rel="noopener noreferrer"`
   - This is handled by the `rehype-external-links` plugin configured in `astro.config.mjs`
   - The plugin automatically detects external URLs (http/https) and adds security attributes
   - Manual HTML links in components must include these attributes explicitly
   - This improves both security (prevents `window.opener` vulnerabilities) and UX (opens in new tabs)

## Error Handling

1. **404 Pages**

   - Implement proper error boundaries
   - Handle missing content gracefully

2. **Error States**
   - Design for error states
   - Provide helpful error messages
   - Implement proper fallbacks

## RSS Feed Implementation

### Overview

The site generates three RSS feeds using Astro's experimental Container API for full MDX component rendering:

- **Combined Feed**: `/rss.xml` - All articles and notes
- **Articles Only**: `/rss/articles.xml` - Long-form articles only
- **Notes Only**: `/rss/notes.xml` - Short-form notes only

### Technical Approach

**Container API for Full MDX Rendering**

The RSS feeds use Astro's experimental Container API (introduced in v4.9) to render MDX components to HTML at build time. This approach:

- Renders all custom MDX components (`<Callout>`, `<BookmarkCard>`, `<Embed>`, `<Notion>`, etc.) as proper HTML
- Eliminates raw import statements from RSS output
- Provides rich, formatted content in RSS readers
- Maintains consistency between website and RSS content

**Implementation Pattern**

```javascript
import { experimental_AstroContainer as AstroContainer } from 'astro/container';
import { getContainerRenderer as getMDXRenderer } from '@astrojs/mdx';
import { loadRenderers } from 'astro:container';
import { getCollection, render } from 'astro:content';
import rss from '@astrojs/rss';

export async function GET(context) {
  // Initialize Container API for MDX rendering
  const renderers = await loadRenderers([getMDXRenderer()]);
  const container = await AstroContainer.create({ renderers });

  // Get content with filtering
  const articles = await getCollection('articles', ({ data }) => {
    return (import.meta.env.PROD ? data.draft !== true : true) && !data.styleguide;
  });

  // Process items with full MDX rendering
  const items = [];
  for (const article of articles) {
    try {
      const { Content } = await render(article);
      const content = await container.renderToString(Content);

      items.push({
        ...article.data,
        link: `/writing/${article.id}/`,
        content,
      });
    } catch (error) {
      console.warn(`Failed to render content for ${article.id}:`, error);
      // Skip problematic items
      continue;
    }
  }

  return rss({
    title: `${SITE_TITLE} - Articles`,
    description: `Articles from ${SITE_DESCRIPTION}`,
    site: context.site,
    items,
  });
}
```

### Content Filtering

**Styleguide Exclusion**
- All feeds filter out content with `styleguide: true` in frontmatter
- Prevents styleguide content from appearing in public RSS feeds

**Draft Content Filtering**
- Production builds filter out content with `draft: true`
- Development builds include draft content for testing

**Content Sorting**
- All feeds sort by publication date (newest first)
- Ensures consistent ordering across all RSS feeds

### Error Handling

**Graceful Degradation**
- Failed component renders are logged and skipped
- Build continues even if individual items fail to render
- Prevents complete build failures from problematic content

**Fallback Strategy**
- Option 1: Skip problematic items (current implementation)
- Option 2: Use basic markdown fallback (if markdown-it is kept)

### Performance Considerations

**Build Time Impact**
- Container API rendering is more resource-intensive than markdown-it
- Current implementation: ~44s build time (vs ~45s baseline)
- Monitor build performance on Vercel deployments

**Optimization Strategies**
- Consider caching rendered content if build times increase significantly
- Monitor memory usage during build process
- Profile build performance if issues arise

### RSS Reader Compatibility

**Component Rendering**
- Custom components render as HTML with scoped styles
- RSS readers may strip CSS or not support all styling
- Test in various RSS readers (Feedly, NetNewsWire, Inoreader, etc.)

**Content Quality**
- No raw import statements in RSS output
- Proper HTML structure with semantic markup
- External links include `target="_blank" rel="noopener noreferrer"`
- Heading IDs and anchor links preserved

### Future Considerations

**Experimental Feature**
- Container API is experimental and may change
- Monitor Astro releases for breaking changes
- Consider pinning Astro version if stability becomes critical

**Alternative Approaches**
- If Container API becomes unstable, consider reverting to markdown-it
- Evaluate RSS feed styling options for better reader compatibility
- Plan for potential Container API breaking changes

### Resources

- [Astro Container API Documentation](https://astro.build/blog/astro-490/#react-19-support)
- [Astro RSS Integration Guide](https://docs.astro.build/en/guides/rss/)
- [MDX Rendering Best Practices](https://docs.astro.build/en/guides/markdown-content/#mdx-components)
