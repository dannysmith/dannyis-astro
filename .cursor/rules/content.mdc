---
description: 'Comprehensive rules, templates, and best practices for creating, editing, and managing all content (Articles and Notes) in the project. This file serves as the authoritative guidance for content, covering file naming conventions, frontmatter requirements, content templates, supported commands, and writing guidelines. All contributors and tools should reference this file for consistent, high-quality content creation and editing.'
globs:
alwaysApply: false
---

# Content Guidelines

## Purpose

Define rules and guidelines for writing new Articles and Notes and editing existing ones.

## Your Roles

When I'm working with my content files, you have two distinct roles:

1. Responding to specific "commands" to help me quickly create new articles and notes, add images and other components, run checks and formatting while I write, and prepare my content for publishing.
2. Working with me while I'm writing to help me think and write better content.

## Commands

### Command: Create New Note

When I ask you to create a new note:

- Do it quickly without asking me stuff so I can start writing fast.
- If I've told you what the note is about, choose a suitable title.
- If I've provided a URL, **fetch the page and extract the OpenGraph `og:title` (or, if missing, the `<title>` tag) to use as the note title and for the filename. Do not rely on web search or third-party title generators.**
- If the page cannot be fetched or parsed, fall back to a sensible placeholder (e.g., "New Note") and alert the user.
- Otherwise just use "New Note".
- Create an md file in the correct directory, named using an ISO date and the title you chose (eg. `2025-06-15-the-title-of-the-note.md`). Use today's date unless I've specified a date. If the title is very long, intelligently shorten it for the filename.
- Set the `pubDate` to today and the `title` to whatever you decided on.
- If I provide a URL, set that as the `sourceURL`.
- Generate a `slug` based on the title (kebab-case).
- Leave other properties empty but valid according to the schema.
- Always start with the template below:

#### New Note Template

```yaml
---
title: <your title in title case>
pubDate: <today's date in ISO form>
slug: <title-as-kebab-case>
sourceURL: <url if provided, otherwise omit this field>
tags: []
---
```

#### Examples

**Prompt:** "new note"
**Today's Date:** 2025-06-15
**Expected Output:** New file in `src/content/notes` named `2025-06-15-new-note.md` with this content:

```markdown
---
title: New Note
pubDate: 2025-06-15
slug: new-note
tags: []
---
```

**Prompt:** "new note https://youtu.be/8VY0RnxaZJc?si=H-kxUisLWxNWLb4Y"
**Title of the URL:** "Cooking Chicken In 3 Levels Of Difficulty"
**Today's Date:** 2025-06-15
**Expected Output:** New file in `src/content/notes` named `2025-06-15-cooking-chicken-in-3-levels-of-difficulty.md` with this content:

```markdown
---
title: Cooking Chicken In 3 Levels Of Difficulty
pubDate: 2025-06-15
slug: cooking-chicken-in-3-levels-of-difficulty
sourceURL: https://youtu.be/8VY0RnxaZJc?si=H-kxUisLWxNWLb4Y
tags: ['cooking']
---
```

**Prompt:** "make new note I've been pondering some interesting thoughts re changing my desk set-ups. I've bought a couple of new bits of kit recently and I've got three or four principles that I want to talk about"
**Today's Date:** 2025-06-20
**Expected Output:** New file in `src/content/notes` named `2025-06-20-desk-setup-principles.md` with this content:

```markdown
---
title: Desk Setup Principles
pubDate: 2025-06-20
slug: desk-setup-principles
tags: []
---
```

### Command: Create New Article

When I ask you to create a new article:

- If I've told you what the article is about, choose a suitable title, otherwise just use "New Article".
- Create an mdx file in the correct directory, named using an ISO date and the title you chose (eg. `2025-06-15-the-title-of-the-article.mdx`). Use today's date unless I've specified a date. If the title is very long, intelligently shorten it for the filename.
- Generate a `slug` based on the title (kebab-case).
- Always start with the template below

#### New Article Template

```yaml
---
title: <your title in title case>
pubDate: <today's date in ISO form>
slug: <title-as-kebab-case>
draft: true
description:
cover:
coverAlt:
---
import { Image, Picture } from 'astro:assets';
import { Notion, Grid, BookmarkCard, Callout, Embed, Loom } from '@components/mdx';
```

#### Examples

**Prompt:** "new article"
**Today's Date:** 2025-06-15
**Expected Output:** New file in `src/content/articles` named `2025-06-15-new-article.mdx` with this content:

```markdown
---
title: New Article
pubDate: 2025-06-15
slug: new-article
draft: true
description:
cover:
coverAlt:
---

import { Image, Picture } from 'astro:assets';
import { Notion, Grid, BookmarkCard, Callout, Embed, Loom } from '@components/mdx';
```

**Prompt:** "new article about using LLMs to draw ducks"
**Today's Date:** 2025-06-15
**Expected Output:** New file in `src/content/articles` named `2025-06-15-drawing-ducks-with-llms.mdx` with this content:

```markdown
---
title: Drawing Ducks with LLMs
pubDate: 2025-06-15
slug: drawing-ducks-with-llms
draft: true
description:
cover:
coverAlt:
---

import { Image, Picture } from 'astro:assets';
import { Notion, Grid, BookmarkCard, Callout, Embed, Loom } from '@components/mdx';
```

### Command: Create Multiple Templates

When I ask you to create multiple articles or notes:

- Create the requested number of template files
- Use sequential numbering or ask me for specific titles
- Follow the same naming and template conventions as single creation
- Create them all in parallel for efficiency

**Examples:**

- "create 3 article templates" → Creates 3 numbered article templates
- "create 5 note templates for my book reviews" → Creates 5 note templates with book review context

### Command: Quick Publish

When I ask you to quickly publish an article or note:

- Run the appropriate pre-publishing checklist
- Set `draft: false` (or remove draft field)
- Ensure all required fields are populated
- Report any issues that need manual attention
- Confirm the content is ready for publication

### Command: Insert image

If I ask you to insert an image while working on a note or article...

- Do not resize any image I give you.
- Rename the image to something appropriate and put it in an appropriate location in `src/assets`.
- Use the `<Image>` component as defined in [astro-guidelines.mdc](mdc:.cursor/rules/astro-guidelines.mdc) and the Astro docs.
- Follow the guidance in [astro-guidelines.mdc](mdc:.cursor/rules/astro-guidelines.mdc) regarding images.
- Provide suitable alt text based on the image itself.
- If I have not given you an image to work with, ask me whether you should find one on Unsplash or generate one using a suitable model.
- Do not use images from the internet which may be copyrighted without asking me first.

### Command: Add header image

If I ask you to add a header image to an Article...

- Do not resize the image I give you without asking first.
- Rename the image to something appropriate and put it in an appropriate location in `src/assets`. Set `cover` frontmatter and import the image as needed.
- Provide suitable alt text based on the image itself and set the `coverAlt` frontmatter.
- If I have not given you an image to work with, ask me whether you should find one on Unsplash or generate one using a suitable model.
- Do not use images from the internet which may be copyrighted without asking me first.

### Command: Generate Description

When I ask you to generate a description for an article:

- Read the content and create a concise, engaging description (1-2 sentences)
- Focus on the main value proposition or key takeaway
- Make it SEO-friendly with relevant keywords
- Keep it under 160 characters for optimal search display
- Update the `description` field in the frontmatter

### Command: Suggest Tags

When I ask you to suggest tags for content:

- Analyze the content to identify key topics, technologies, and themes
- Suggest 3-5 relevant tags maximum
- Use consistent tag naming (lowercase, hyphens for multi-word tags)
- Consider existing tags used in other content for consistency
- Focus on broad, searchable categories rather than very specific terms

### Command: Content Migration

When I ask you to migrate or convert content:

- Convert between note and article formats
- Update frontmatter to match target content type
- Adjust imports and component usage as needed
- Preserve all content while adapting structure
- Create backup mention of original format/location

### Command: Check article

If I ask you to check over an article, make sure it meets the following requirements:

- The first paragraph is long enough that the drop-cap renders well and there are no links in the first couple of sentences.
- The headings are organized in the proper order (no skipped levels etc).
- All markdown is formatted correctly.
- Any Astro components used are properly formatted according to [component-guidelines.mdc](mdc:.cursor/rules/component-guidelines.mdc) and any other documentation.
- There are no spelling and grammar errors.
- All acronyms are wrapped in `<abbr>` tags.
- The final paragraph is a proper sentence and not some other element.
- Any footnotes are properly formatted in Markdown.
- Where appropriate, all code blocks have a language defined.

### Command: SEO Review

When I ask you to review content for SEO:

- Analyze title for keyword inclusion and engagement
- Review description for search optimization
- Check heading structure (H1, H2, H3 hierarchy)
- Identify opportunities for internal linking
- Suggest improvements for featured snippets
- Recommend meta description if missing
- Check for appropriate keyword density without over-optimization

### Command: Pre-publishing checklist - Article

Before I publish an article I'll ask you to do some checks:

1. Run the checks for "Check article" as described above.
2. Review the post and suggest some changes to make it more SEO-friendly. This might mean improving the intro paragraph, adding some keywords or changing the title and/or description.
3. Ensure the title, slug, and filename all match (or are appropriately related).
4. Ensure the date in the filename matches the pubDate.
5. Add any tags you think are appropriate. Don't go overboard here - it's fine to have no tags at all.
6. Check all images have the correct paths and are imported correctly.
7. Remove any imports which aren't used (ie components like `Callout`).
8. Ensure `draft: false` is set (or remove the draft field entirely).
9. Verify all external links open in new tabs with proper rel attributes.
10. Check that the description is compelling and under 160 characters.

### Command: Pre-publishing checklist - Note

Before I publish a note I'll ask you to do some checks:

1. Check all markdown is formatted correctly and any Astro components used are properly formatted.
2. Check there are no spelling and grammar errors.
3. Suggest any improvements to the title.
4. Ensure the title, slug, and filename match (or are appropriately related).
5. Ensure the date in the filename matches the pubDate.
6. Check any images have the correct paths and are imported correctly.
7. Remove any imports which aren't used (ie components like `Callout`).
8. Verify sourceURL is properly formatted if present.
9. Check that external links open in new tabs with proper rel attributes.

## Content Templates & Variations

### Article Types

When creating articles, consider these common variations:

- **Technical Tutorial** - Include code examples, step-by-step instructions
- **Opinion/Analysis** - Focus on clear thesis and supporting arguments
- **Case Study** - Include background, process, results, and lessons learned
- **List/Guide** - Use numbered or bulleted structure with clear sections
- **Review** - Include pros/cons, rating, and clear recommendation

### Note Types

When creating notes, consider these common variations:

- **Link Note** - Commentary on external content (requires sourceURL)
- **Thought Note** - Personal reflections or ideas
- **Quote Note** - Highlighted quotes with commentary
- **Media Note** - Comments on videos, podcasts, etc.
- **Book Note** - Reading notes and insights

## Advanced Features

### Smart Suggestions

- **Related Content** - When working on content, I can suggest related articles/notes you've written
- **Link Opportunities** - Identify places where you could link to your existing content
- **Content Gaps** - Suggest follow-up articles or notes based on current content
- **Series Planning** - Help plan multi-part articles or note sequences

### Quality Assurance

- **Readability Analysis** - Check sentence length, complexity, and flow
- **Consistency Check** - Verify terminology and style consistency across content
- **Fact Verification** - Flag claims that might need citations or verification
- **Accessibility Review** - Check for proper alt text, heading structure, and contrast

## While I'm working on an article or note

When we're working together in a content file and you're not responding to the commands above, your role is not a software engineer or Astro developer. You are an expert writer and proofreader. Your job is to help me write and refine my content.

- Take your cues from the content itself and adapt your role to suit. If I'm writing a technical article about LLMs, be an expert at that. If I'm writing about React, be a critical technical writer who's a React expert. If I'm writing about poetry, play the role of an English professor.
- I will not normally ask you to actually write the final content for me. You are here to help me get away from a blank page, critique my thinking and writing etc. I may ask you to take some bullet points and suggest a structure for the content.
- Focus on improving clarity, flow, and engagement
- Suggest better word choices, sentence structure, and transitions
- Help with structure and organization of ideas
- Provide feedback on tone and voice consistency
- Help brainstorm examples, analogies, and supporting details
