---
description: Project structure and file organization guidelines
globs: ['**/*']
alwaysApply: true
---
# Project Structure

## Purpose

Define the organization and architecture of the personal website built with Astro, ensuring consistency and maintainability across the codebase.

## Directory Structure

```
src/
├── components/        # Reusable Astro components (organized by category)
│   ├── layout/        # Layout and structural components
│   │   ├── BaseHead.astro      # HTML head with centralized SEO utilities, theme management, and comprehensive meta tag generation
│   │   ├── Footer.astro        # Site footer
│   │   ├── MainNavigation.astro # Primary site navigation
│   │   ├── NoteCard.astro      # Note layout wrapper
│   │   ├── Lightbox.astro      # Article image lightbox
│   │   └── index.ts            # Barrel exports
│   ├── navigation/    # Navigation-specific components
│   │   ├── NavLink.astro       # Individual navigation links
│   │   ├── ThemeToggle.astro   # Theme switching component
│   │   └── index.ts            # Barrel exports
│   ├── ui/           # Small, reusable UI utilities
│   │   ├── FormattedDate.astro # Date formatting component
│   │   ├── Pill.astro          # Tag/label component
│   │   ├── Spinner.astro       # Loading spinner
│   │   └── index.ts            # Barrel exports
│   ├── mdx/          # Components available in MDX content
│   │   ├── BookmarkCard.astro  # URL preview cards
│   │   ├── Callout.astro       # Information callouts
│   │   ├── Embed.astro         # Universal embed component
│   │   ├── Grid.astro          # CSS Grid layout
│   │   ├── Loom.astro          # Loom video embeds
│   │   ├── Notion.astro        # Notion page links
│   │   └── index.ts            # Barrel exports (used in MDX files)
│   ├── icons/        # Icon components
│   │   ├── InstagramIcon.astro
│   │   ├── LinkedInIcon.astro
│   │   ├── NotionIcon.astro
│   │   ├── RSSIcon.astro
│   │   └── YouTubeIcon.astro
│   └── index.ts      # Main component barrel export
├── config/           # Configuration files
│   └── seo.ts        # Centralized SEO configuration and constants
├── content/          # Content collections
│   ├── articles/     # Long-form articles as MDX and md files
│   └── notes/        # Short-form content as MDX and md files
├── layouts/          # Page layouts
│   ├── Article.astro  # Article page layout
│   └── Note.astro    # Note page layout
├── pages/            # Astro pages (routes)
├── styles/           # Global styles and CSS
│   └── global.css    # Global styles
└── utils/            # Utility functions and helpers
    └── seo.ts        # SEO utility functions for metadata generation

public/               # Static assets
├── images/           # Image assets
└── fonts/            # Font files

.cursor/              # Cursor configuration
└── rules/            # Project rules and guidelines

tasks/                # Task tracking when working with Cursor AI

docs/                 # All Documentation & Notes
```

## Content Organization

### Articles

Longer-form articles.

- Stored in `src/content/articles/`
- Use `.mdx` or `.md` extension
- Required frontmatter:
  ```yaml
  title: String
  pubDate: Date
  draft: Boolean (default: false)
  ```
- Optional frontmatter:
  ```yaml
  updatedDate: Date
  cover: Image
  coverAlt: String
  description: String
  tags: String[]
  platform: "medium" | "external"
  redirectUrl: String
  ```

### Notes

Short notes, often commenting on something elsewhere on the internet (`url` in the frontmatter).

- Stored in `src/content/notes/`
- Use `.md` or `.mdx` extension
- Required frontmatter:
  ```yaml
  pubDate: Date
  ```
- Optional frontmatter:
  ```yaml
  title: String
  url: String
  tags: String[]
  ```

See [content.md](mdc:.cursor/rules/content.md) for how I write new content.

## Component Organization

### Component Categories

Components are organized into logical categories based on their purpose and usage patterns:

#### Layout Components (`src/components/layout/`)
Structural components that define the overall page layout and architecture:
- **BaseHead.astro** - HTML head with centralized SEO utilities, theme management, and comprehensive meta tag generation
- **Footer.astro** - Site footer with social links and nagivation
- **MainNavigation.astro** - Primary site navigation with mobile menu
- **NoteCard.astro** - Wrapper component for note layout and metadata
- **Lightbox.astro** - Image lightbox functionality for articles

#### Navigation Components (`src/components/navigation/`)
Components specifically for navigation functionality:
- **NavLink.astro** - Individual navigation links with active state
- **ThemeToggle.astro** - Theme switching component (auto/light/dark)

#### UI Utilities (`src/components/ui/`)
Small, reusable utility components:
- **FormattedDate.astro** - Date formatting component
- **Pill.astro** - Tag/badge component for labels and categories
- **Spinner.astro** - Loading spinner for async operations

#### MDX Components (`src/components/mdx/`)
Components available for use in MDX content files:
- **BookmarkCard.astro** - Rich URL preview cards using Open Graph data
- **Callout.astro** - Information callouts with color variants and icons
- **Embed.astro** - Universal embed component for YouTube, Twitter, Vimeo, Loom
- **Grid.astro** - CSS Grid layout component with responsive options
- **Loom.astro** - Dedicated Loom video embed component
- **Notion.astro** - Notion page links with automatic title fetching

#### Icon Components (`src/components/icons/`)
SVG icon components for consistent iconography across the site.

### Import Patterns

#### Path Aliases
The project uses TypeScript path aliases for clean imports:
```typescript
// Category-specific component imports (recommended)
import { BaseHead, Footer } from '@components/layout';
import { FormattedDate, Pill } from '@components/ui';
import { NavLink, ThemeToggle } from '@components/navigation';

// Direct component imports
import BaseHead from '@components/layout/BaseHead.astro';
import Callout from '@components/mdx/Callout.astro';

// MDX component imports (used in content files)
import { Callout, Embed, BookmarkCard } from '@components/mdx';

// Configuration and utility imports
import { AUTHOR, TITLE_TEMPLATES } from '@config/seo';
import { generatePageTitle, validateSEOData } from '@utils/seo';

// Icon imports
import RSSIcon from '@components/icons/RSSIcon.astro';
```

#### TypeScript Path Configuration
```json
{
  "paths": {
    "@components/*": ["src/components/*"],
    "@components/layout/*": ["src/components/layout/*"],
    "@components/navigation/*": ["src/components/navigation/*"],
    "@components/mdx/*": ["src/components/mdx/*"],
    "@components/ui/*": ["src/components/ui/*"],
    "@config/*": ["src/config/*"],
    "@utils/*": ["src/utils/*"],
    "@layouts/*": ["src/layouts/*"],
    "@assets/*": ["src/assets/*"]
  }
}
```

#### Barrel Exports
Each category includes an `index.ts` file for convenient importing:
- `@components/layout/index.ts` - Layout component exports
- `@components/navigation/index.ts` - Navigation component exports
- `@components/ui/index.ts` - UI utility component exports
- `@components/mdx/index.ts` - MDX component exports (replaces old components.ts)
- `@components/index.ts` - Main barrel export for all components

### Component Guidelines

1. **Categorization**: Place components in the appropriate category based on their primary purpose
2. **Naming**: Use PascalCase for component files and descriptive names
3. **Dependencies**: Components within a category can import from other categories, but avoid circular dependencies
4. **MDX Components**: Only components in the `mdx/` directory should be used in content files
5. **Barrel Exports**: Update the appropriate `index.ts` file when adding new components

## Technical Implementation

The project is built with:

- **Astro**: Core framework
- **TypeScript**: For type-safe code
- **MDX**: For enhanced markdown content
- **CSS**: For styling (no CSS frameworks)
- **Vercel**: For deployment

### Key Directories

- **`src/config/`**: Centralized configuration files
  - `seo.ts` - All SEO constants, templates, and structured data configuration
- **`src/utils/`**: Utility functions and helpers
  - `seo.ts` - Pure functions for SEO metadata generation and validation
- **`src/components/`**: Organized component library with barrel exports
- **`src/content/`**: Type-safe content collections for articles and notes
- **`src/layouts/`**: Page layout templates with integrated SEO

### SEO Architecture

- **Centralized Configuration**: All SEO settings in `src/config/seo.ts`
- **Utility Functions**: Clean, testable SEO generation in `src/utils/seo.ts`
- **BaseHead Integration**: Automatic SEO optimization for all pages
- **Structured Data**: Comprehensive Schema.org JSON-LD for better search indexing
- **Theme Management**: Global `window.theme` API with automatic system detection

## Best Practices

1. **File Naming**

   - Use kebab-case for file names
   - Use PascalCase for component names
   - Use camelCase for utility functions

2. **Component Structure**

   - One component per file
   - Co-locate component styles
   - Use TypeScript interfaces for props

3. **Content Management**

   - Use content collections for type safety
   - Validate frontmatter
   - Keep content separate from code

4. **Asset Management**

   - Use Astro's image optimization
   - Organize assets by type
   - Use descriptive file names

5. **Code Organization**
   - Keep related code together
   - Use clear, descriptive names
   - Document complex logic
   - Follow single responsibility principle
