---
description: Define guidelines for developing and maintaining components in the personal website, ensuring consistency, reusability, and performance
globs: ['**/*']
alwaysApply: true
---
# Component Development

## Purpose

Define guidelines for developing and maintaining components in the personal website, ensuring consistency, reusability, and performance.

## Component Organization

Components are organized into logical categories in `src/components/`:

### Layout Components (`layout/`)
Structural components that define the overall page layout and architecture:

1. **BaseHead.astro** - HTML head component with centralized SEO utilities and theme management
2. **Footer.astro** - Site footer with social links and navigation
3. **MainNavigation.astro** - Primary site navigation with mobile menu
4. **NoteCard.astro** - Note layout wrapper with metadata display
5. **Lightbox.astro** - Image lightbox functionality for articles

### Navigation Components (`navigation/`)
Components specifically for navigation functionality:

1. **NavLink.astro** - Individual navigation links with active state
2. **ThemeToggle.astro** - Theme switching component (auto/light/dark)

### UI Utility Components (`ui/`)
Small, reusable utility components:

1. **FormattedDate.astro** - Date formatting with semantic markup
2. **Pill.astro** - Tag/badge component for labels and categories
3. **Spinner.astro** - Loading spinner for async operations

### MDX Components (`mdx/`)
Components available for use in MDX content files:

1. **BookmarkCard.astro** - Rich URL preview cards using Open Graph data
2. **Callout.astro** - Information callouts with color variants and icons
3. **Embed.astro** - Universal embed component for YouTube, Twitter, Vimeo, Loom
4. **Grid.astro** - CSS Grid layout component with responsive options
5. **Loom.astro** - Dedicated Loom video embed component
6. **Notion.astro** - Notion page links with automatic title fetching

### Icon Components (`icons/`)
SVG icon components for consistent iconography across the site:

1. **InstagramIcon.astro**
2. **LinkedInIcon.astro**
3. **NotionIcon.astro**
4. **RSSIcon.astro**
5. **YouTubeIcon.astro**

## Component Documentation

### ThemeToggle.astro

- **Purpose:**

  - Interactive theme switching component with three options: auto, light, and dark.
  - Uses a custom element with TypeScript for robust client-side functionality.
  - Integrates with the global theme system via `window.theme` API.
  - Supports ViewTransitions and handles theme changes from other sources.

- **Props:**

  - No props required - component is self-contained.

- **Design & Usage:**

  - Renders three buttons in a horizontal layout with icons and labels.
  - Auto theme (‚óê) follows system preference, Light (‚òÄ) and Dark (üåô) are explicit.
  - Active state shows with brand color background and white text.
  - Hover states use subtle background tint and opacity changes.
  - Fully accessible with proper ARIA attributes and keyboard navigation.
  - Uses CSS variables for consistent theming across light/dark modes.

- **Technical Implementation:**

  - Custom element class with TypeScript for type safety.
  - Handles ViewTransitions via `astro:after-swap` event.
  - Listens for `theme-changed` events from global theme system.
  - Fallback initialization for immediate DOM access.
  - Graceful degradation if theme system isn't available.

- **Example:**
  ```astro
  <ThemeToggle />
  ```

### Embed.astro

- **Purpose:**

  - Universal embed component for rich media and link previews.
  - Automatically detects and renders YouTube, Tweet, Vimeo, and Loom embeds.
  - Falls back to `BookmarkCard` for all other URLs, ensuring consistent design.

- **Props:**

  - `url: string` (required) ‚Äî The URL to embed or preview.
  - `className?: string` (optional) ‚Äî Additional classes for custom styling.

- **Design & Usage:**

  - Use `<Embed url="..." />` anywhere you want to embed a link or media.
  - No client JS required; all logic is server-side.
  - If the URL is a YouTube, Tweet, Vimeo, or Loom link, renders the appropriate embed.
  - For all other URLs, renders a `BookmarkCard` with your custom styling.
  - Responsive and accessible by default.

- **Example:**
  ```astro
  <Embed url="https://www.youtube.com/watch?v=dQw4w9WgXcQ" />
  <Embed url="https://twitter.com/astro_build/status/1552351234567890123" />
  <Embed url="https://vimeo.com/76979871" />
  <Embed url="https://www.loom.com/share/e738280dc4464402927315e1fda6b036" />
  <Embed url="https://astro.build" /> <!-- Falls back to BookmarkCard -->
  ```

### Loom.astro

- **Purpose:**

  - Standalone component for embedding Loom videos.
  - Provides responsive iframe embedding with proper aspect ratio.
  - Used internally by `Embed.astro` but can also be used directly.

- **Props:**

  - `id: string` (required) ‚Äî The Loom video ID (extracted from URL).
  - `className?: string` (optional) ‚Äî Additional classes for custom styling.

- **Design & Usage:**

  - Use `<Loom id="..." />` when you have the video ID directly.
  - Responsive 16:9 aspect ratio container.
  - No client JS required; server-side rendered iframe.
  - Supports fullscreen playback.

- **Example:**
  ```astro
  <Loom id="e738280dc4464402927315e1fda6b036" />
  ```

### BookmarkCard.astro

- **Purpose:**

  - Displays a rich preview of a URL/bookmark using Open Graph and metadata.
  - Used for blogrolls, bookmarks, and as a fallback for universal embeds.

- **Props:**

  - `url: string` (required) ‚Äî The URL to preview.
  - `className?: string` (optional) ‚Äî Additional classes for custom styling.

- **Design & Usage:**

  - Uses `@astro-community/astro-embed-link-preview` under the hood.
  - Responsive: horizontal layout with image on the right for wide containers, stacked for narrow.
  - Title uses the primary accent color (`var(--c-primary)`).
  - Domain is rendered in monospace font (`var(--font-code)`).
  - All colors and fonts use global CSS variables.
  - Subtle border radius and box-shadow for modern card look.
  - Accessible: focus states and semantic markup.
  - Minimal, DRY CSS with container queries for layout.

- **Example:**
  ```astro
  <BookmarkCard url="https://astro.build" />
  ```

### Pill.astro

- **Purpose:**

  - Renders a small, rounded label or badge for tags, categories, or statuses.

- **Props:**

  - `text: string` (required) ‚Äî The label text.
  - `color?: string` (optional) ‚Äî Background color (CSS variable or value). Defaults to `var(--color-grey-700)`.
  - `textColor?: string` (optional) ‚Äî Text color. Defaults to `white`.

- **Design & Usage:**

  - Uses CSS variables for background and text color for easy theming.
  - Uppercase, bold, and slightly condensed for visual punch.
  - Subtle border and small border-radius for a modern badge look.
  - Inline-flex for alignment with text or icons.

- **Example:**
  ```astro
  <Pill text="Draft" color="var(--color-yellow-500)" textColor="var(--c-black)" />
  ```

### Callout.astro

- **Purpose:**

  - Simple callout component for highlighting important information.
  - Uses existing color system from global.css for consistency.
  - Clean, minimal design that fits with the site's aesthetic.

- **Props:**

  - `title?: string` (optional) ‚Äî The callout title/heading.
  - `type?: 'default' | 'red' | 'blue' | 'green' | 'orange' | 'yellow' | 'purple'` (optional) ‚Äî Color variant. Defaults to 'default'.
  - `icon?: string` (optional) ‚Äî Emoji or icon to display.

- **Design & Usage:**

  - Use `<Callout>content</Callout>` for basic callouts.
  - Add `icon` prop for visual emphasis (emojis work well).
  - Add `title` prop for structured callouts with headings.
  - Choose appropriate `type` for semantic meaning.
  - Uses existing color variables from global.css (--color-{type}-300).
  - Simple, clean design without excessive styling.

- **Color Variants:**

  - `default` ‚Äî Gray (--color-grey-300)
  - `blue` ‚Äî Blue (--color-blue-300)
  - `green` ‚Äî Green (--color-green-300)
  - `yellow` ‚Äî Yellow (--color-yellow-300)
  - `red` ‚Äî Red (--color-red-300)
  - `orange` ‚Äî Orange (--color-orange-300)
  - `purple` ‚Äî Purple (--color-purple-300)

- **Examples:**

  ```astro
  <!-- Basic callout -->
  <Callout type="blue">
    This is a simple blue callout.
  </Callout>

  <!-- Callout with icon and title -->
  <Callout icon="üí°" type="blue" title="Tip">
    This callout has an icon and title.
  </Callout>

  <!-- Error callout -->
  <Callout icon="‚ùå" type="red" title="Error">
    Something went wrong.
  </Callout>
  ```

### BaseHead.astro

- **Purpose:**

  - Centralized HTML head management with SEO optimization and theme management
  - Uses utilities from `@utils/seo` and configuration from `@config/seo`
  - Generates comprehensive meta tags, structured data, and OpenGraph properties
  - Includes global theme management system with auto/light/dark support

- **Props:**

  ```typescript
  interface Props {
    title: string;                    // Page title (required)
    description?: string;             // Meta description
    image?: string;                   // Custom OG image URL
    type?: 'website' | 'article';    // OpenGraph type (default: 'website')
    pageType?: 'article' | 'note' | 'page'; // For title template selection
    pubDate?: Date;                   // Publication date (for articles/notes)
    updatedDate?: Date;               // Last modified date (for articles/notes)
    tags?: string[];                  // Tags/keywords (for articles/notes)
  }
  ```

- **SEO Features:**

  - **Centralized Configuration**: All SEO settings managed in `src/config/seo.ts`
  - **Title Templates**: Automatic title formatting based on `pageType`
  - **Meta Description**: Consistent branding applied to descriptions
  - **Structured Data**: Comprehensive Schema.org JSON-LD generation
  - **OpenGraph**: Complete Facebook/social media optimization
  - **Twitter Cards**: Optimized Twitter sharing metadata
  - **Article Meta**: Specialized meta tags for article/note content

- **Theme Management:**

  - **Global API**: Provides `window.theme` for theme control
  - **Auto Detection**: Respects system preference in auto mode
  - **Persistence**: Saves theme choice to localStorage
  - **ViewTransitions**: Handles theme during page navigation
  - **Events**: Dispatches `theme-changed` events for components

- **Technical Implementation:**

  - Uses utility functions for clean, testable SEO generation
  - Validates and sanitizes all input data
  - Handles fallbacks for missing or invalid data
  - Inline theme script prevents flash of unstyled content
  - Supports both manual and automatic theme switching

- **Example:**
  ```astro
  <BaseHead
    title="My Article"
    description="An insightful article about..."
    type="article"
    pageType="article"
    pubDate={new Date('2024-01-01')}
    tags={['productivity', 'remote-work']}
  />
  ```

## Development Guidelines

### Component Structure

1. **File Organization**

   ```astro
   components/
   ‚îú‚îÄ‚îÄ layout/           # Layout and structural components
   ‚îÇ   ‚îú‚îÄ‚îÄ BaseHead.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ MainNavigation.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ NoteCard.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Lightbox.astro
   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts      # Barrel exports
   ‚îú‚îÄ‚îÄ navigation/       # Navigation-specific components
   ‚îÇ   ‚îú‚îÄ‚îÄ NavLink.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ ThemeToggle.astro
   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts      # Barrel exports
   ‚îú‚îÄ‚îÄ ui/              # Small, reusable UI utilities
   ‚îÇ   ‚îú‚îÄ‚îÄ FormattedDate.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Pill.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Spinner.astro
   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts      # Barrel exports
   ‚îú‚îÄ‚îÄ mdx/             # Components for MDX content
   ‚îÇ   ‚îú‚îÄ‚îÄ BookmarkCard.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Callout.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Embed.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Grid.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Loom.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ Notion.astro
   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts      # Barrel exports
   ‚îú‚îÄ‚îÄ icons/           # Icon components
   ‚îÇ   ‚îú‚îÄ‚îÄ InstagramIcon.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ LinkedInIcon.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ NotionIcon.astro
   ‚îÇ   ‚îú‚îÄ‚îÄ RSSIcon.astro
   ‚îÇ   ‚îî‚îÄ‚îÄ YouTubeIcon.astro
   ‚îî‚îÄ‚îÄ index.ts         # Main component barrel
   ```

2. **Code Structure**

   ```astro
   ---
   // 1. Imports
   import { Image } from 'astro:assets';
   import type { Props } from './types';

   // 2. Props Interface
   export interface Props {
     required: string;
     optional?: number;
     withDefault?: boolean;
   }

   // 3. Props destructuring with defaults
   const { prop1, prop2, withDefault = true } = Astro.props;

   // 4. Data fetching with error handling (if needed)
   try {
     const data = await fetchData();
   } catch (error) {
     console.warn('Failed to fetch data:', error);
     // Implement fallback behavior
   }
   ---

   <!-- 5. Template with accessibility attributes -->
   <div class="component">
     <!-- Content -->
   </div>

   <!-- 6. Styles -->
   <style>
     :root {
       --component-background: var(--color-bg-dark-200);
       --component-foreground: var(--c-white);
       /* Other CSS variables */
     }

     /* Component styles */
   </style>
   ```

3. **Import Patterns**

   Use TypeScript path aliases for clean component imports:

   ```typescript
   // Category-specific barrel imports (recommended)
   import { BaseHead, Footer } from '@components/layout';
   import { FormattedDate, Pill } from '@components/ui';
   import { NavLink, ThemeToggle } from '@components/navigation';

   // Direct component imports
   import BaseHead from '@components/layout/BaseHead.astro';
   import Callout from '@components/mdx/Callout.astro';

   // MDX content imports (used in content files)
   import { Callout, Embed, BookmarkCard } from '@components/mdx';

   // Configuration and utility imports
   import { AUTHOR, TITLE_TEMPLATES } from '@config/seo';
   import { generatePageTitle, validateSEOData } from '@utils/seo';

   // Icon imports
   import RSSIcon from '@components/icons/RSSIcon.astro';
   ```

4. **Component Placement Guidelines**

   When creating new components, choose the appropriate category:

   - **Layout**: Components that define page structure or major sections
   - **Navigation**: Components specifically for site navigation
   - **UI**: Small, reusable utility components
   - **MDX**: Components intended for use in content files
   - **Icons**: SVG icon components

   After adding a component, update the relevant `index.ts` barrel export file.

### Error Handling

1. **Network Requests**

   - Always wrap external API calls in try-catch blocks
   - Provide meaningful fallback content
   - Log warnings for debugging without breaking the build
   - Example:
     ```typescript
     try {
       const result = await externalAPI(url);
       data = result.data;
     } catch (error) {
       console.warn(`Failed to fetch data from ${url}:`, error);
       data = fallbackData;
     }
     ```

2. **Graceful Degradation**
   - Provide optional props for manual overrides
   - Use sensible defaults
   - Ensure components work even when external services fail

### Props Interface

1. **TypeScript Definition**

   ```typescript
   export interface Props {
     required: string;
     optional?: number;
     withDefault?: boolean;
     title?: string; // Optional override for performance
   }
   ```

2. **Default Values**
   ```typescript
   const { required, optional, withDefault = true, title } = Astro.props;
   ```

### External Links

1. **Security & UX Requirements**

   - **Always use `target="_blank" rel="noopener noreferrer"` for external links** in manual HTML
   - Markdown external links are handled automatically via the `rehype-external-links` plugin
   - The `rel="noopener noreferrer"` prevents potential security vulnerabilities and performance issues
   - The `target="_blank"` ensures external links open in new tabs for better UX
   - Validate URLs when possible

2. **Implementation**

   ```astro
   <!-- ‚úÖ Correct: Manual HTML external links -->
   <a href="https://example.com" target="_blank" rel="noopener noreferrer">External Link</a>

   <!-- ‚úÖ Correct: Preserve rel="me" with target="_blank" for identity links -->
   <a href="https://social.example/@user" rel="me" target="_blank">Social Profile</a>

   <!-- ‚úÖ Automatic: Markdown links are handled by rehype-external-links -->
   [External Link](https://example.com)

   <!-- ‚ùå Incorrect: Missing security attributes -->
   <a href="https://example.com" target="_blank">External Link</a>
   ```

3. **Accessibility**
   - Add `aria-hidden="true"` to decorative icons
   - Ensure proper focus management
   - Use semantic HTML elements

### Styling

1. **CSS Variables and Theming**

   - **Global Theme Variables**: All semantic color variables are defined in `global.css` under the `@layer theme` section
   - **Component Variables**: Define component-specific variables in component `:root` when needed
   - **Theme Integration**: Components should use semantic variables from global.css rather than hardcoded colors
   - **No Media Queries in Components**: Theme switching is handled globally via `data-theme` attributes

   **Example of proper theming:**
   ```css
   /* In global.css - semantic variables */
   :root[data-theme='light'] {
     --color-nav-bg: var(--color-bg-dark-200);
     --color-nav-text: var(--color-brand-white);
   }

   :root[data-theme='dark'] {
     --color-nav-bg: var(--color-bg-light-200);
     --color-nav-text: var(--color-brand-black);
   }

   /* In component - use semantic variables */
   .component {
     background: var(--color-nav-bg);
     color: var(--color-nav-text);
   }
   ```

   **When to add new semantic variables:**
   - When a component needs different colors in light/dark modes
   - When the color has semantic meaning (e.g., `--color-nav-bg`, `--color-notecard-border`)
   - When the color is used across multiple components
   - Add them to the appropriate section in `global.css` under `@layer theme`

   **Variable naming convention:**
   - Use semantic names: `--color-{component}-{property}`
   - Examples: `--color-nav-bg`, `--color-notecard-border`, `--color-footer-text`
   - Group related variables together in `global.css`

2. **Modern CSS**

   - Use `inline-flex` for better alignment control
   - Implement smooth transitions for interactions
   - Use `currentColor` to inherit text color
   - Prefer `object-fit` for image sizing
   - Example:

     ```css
     .component {
       display: inline-flex;
       align-items: baseline;
       transition: opacity 0.2s ease;
     }

     .component:hover {
       opacity: var(--component-hover-opacity);
     }
     ```

3. **Responsive Design**

   - Use container queries when appropriate
   - Implement mobile-first layouts
   - Use clamp() for fluid typography
   - Example:

     ```css
     @container (width > 400px) {
       /* Desktop styles */
     }

     .title {
       font-size: clamp(1rem, calc(0.6rem + 1vw), 1.5rem);
     }
     ```

4. **Layout Patterns**
   - Use CSS Grid for complex layouts
   - Flexbox for alignment and spacing
   - Container queries for component-level responsiveness
   - Example:
     ```css
     .container {
       display: flex;
       justify-content: space-between;
       align-items: center;
     }
     ```

### Accessibility

1. **Semantic HTML**

   - Use appropriate elements (`<article>`, `<section>`, etc.)
   - Include ARIA attributes when needed
   - Support keyboard navigation
   - Maintain focus management

2. **Testing**
   - Test with screen readers
   - Verify keyboard access
   - Check color contrast
   - Validate ARIA usage

## Best Practices

1. **Performance**

   - Minimize JavaScript
   - Optimize images with proper dimensions
   - Lazy load when appropriate
   - Monitor bundle size
   - Provide manual overrides to skip expensive operations

2. **Maintenance**

   - Write clear documentation
   - Include usage examples
   - Add prop validation
   - Handle edge cases
   - Implement proper error handling

3. **Documentation**
   - Purpose and usage
   - Props and types
   - Examples and demos
   - Accessibility notes
   - Error handling behavior

### SEO Development Guidelines

1. **Centralized Configuration**

   - All SEO constants live in `src/config/seo.ts`
   - Update personal branding, job titles, and descriptions in one place
   - Title templates ensure consistent formatting across page types
   - Schema.org structured data configured centrally

2. **Utility Functions**

   - Use functions from `src/utils/seo.ts` for all SEO metadata generation
   - Functions are pure, testable, and handle edge cases
   - Consistent branding applied automatically
   - Proper validation and sanitization of input data

3. **SEO Best Practices**

   ```typescript
   // ‚úÖ Good: Use centralized configuration
   import { generatePageTitle, validateSEOData } from '@utils/seo';
   const seoData = validateSEOData(Astro.props);
   const title = generatePageTitle(seoData.title, seoData.pageType);

   // ‚ùå Bad: Manual SEO generation
   const title = `${props.title} | Danny Smith`;
   ```

4. **Page Type Guidelines**

   - Use `pageType="article"` for long-form content
   - Use `pageType="note"` for short-form content
   - Use `pageType="page"` for static pages
   - Omit `pageType` for homepage or custom titles

5. **Content-Specific SEO**

   - Articles and notes automatically get article-specific meta tags
   - Publication and modification dates included when provided
   - Tags become keywords for better search indexing
   - Custom OG images supported with automatic fallbacks

## Development Guidelines
