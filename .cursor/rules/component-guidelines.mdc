---
description: Define guidelines for developing and maintaining components in the personal website, ensuring consistency, reusability, and performance
globs: ['**/*']
alwaysApply: true
---
# Component Development

## Purpose

Define guidelines for developing and maintaining components in the personal website, ensuring consistency, reusability, and performance.

## Component Organization

Components are organized into logical categories in `src/components/`:

### Layout Components (`layout/`)
Structural components that define the overall page layout and architecture:

1. **BaseHead.astro** - HTML head component with centralized SEO utilities and theme management
2. **Footer.astro** - Site footer with social links and navigation
3. **MainNavigation.astro** - Primary site navigation with mobile menu
4. **NoteCard.astro** - Note layout wrapper with metadata display
5. **Lightbox.astro** - Image lightbox functionality for articles

### Navigation Components (`navigation/`)
Components specifically for navigation functionality:

1. **NavLink.astro** - Individual navigation links with active state
2. **ThemeToggle.astro** - Theme switching component (auto/light/dark)

### UI Utility Components (`ui/`)
Small, reusable utility components:

1. **FormattedDate.astro** - Date formatting with semantic markup
2. **Pill.astro** - Tag/badge component for labels and categories
3. **Spinner.astro** - Loading spinner for async operations

### MDX Components (`mdx/`)
Components available for use in MDX content files:

1. **BookmarkCard.astro** - Rich URL preview cards using Open Graph data
2. **Callout.astro** - Information callouts with color variants and icons
3. **Embed.astro** - Universal embed component for YouTube, Twitter, Vimeo, Loom
4. **Grid.astro** - CSS Grid layout component with responsive options
5. **Loom.astro** - Dedicated Loom video embed component
6. **Notion.astro** - Notion page links with automatic title fetching

### Icon Components (`icons/`)
SVG icon components for consistent iconography across the site:

1. **InstagramIcon.astro**
2. **LinkedInIcon.astro**
3. **NotionIcon.astro**
4. **RSSIcon.astro** - Monochrome, scalable RSS icon for feed links and auto-discovery
5. **YouTubeIcon.astro**

## Component Documentation

For detailed documentation of individual components, refer to the component files themselves and the styleguide pages:

- **Main Styleguide**: `/src/pages/styleguide.astro` - Exhaustive visual testbed for all components
- **Note Styleguide**: `/src/content/notes/note-styleguide.mdx` - MDX features in note context
- **Article Styleguide**: `/src/content/articles/article-styleguide.mdx` - MDX features in article context

### Key Components

#### ThemeToggle.astro
- **Purpose**: Interactive theme switching (auto/light/dark)
- **Props**: None (self-contained)
- **Usage**: `<ThemeToggle />`
- **When to use**: Navigation areas, headers

#### Embed.astro
- **Purpose**: Universal embed component for YouTube, Twitter, Vimeo, Loom
- **Props**: `url` (required), `className?` (optional)
- **Usage**: `<Embed url="https://youtu.be/..." />`
- **When to use**: Any external media or link that needs rich preview

#### BookmarkCard.astro
- **Purpose**: Rich URL preview cards using Open Graph data
- **Props**: `url` (required), `className?` (optional)
- **Usage**: `<BookmarkCard url="https://example.com" />`
- **When to use**: Blogrolls, bookmarks, external link previews

#### Callout.astro
- **Purpose**: Information callouts with color variants and icons
- **Props**: `type?` (color variant), `title?`, `icon?`
- **Usage**: `<Callout type="blue" title="Tip">Content</Callout>`
- **When to use**: Highlighting important information, tips, warnings

#### Pill.astro
- **Purpose**: Tag/badge component for labels and categories
- **Props**: `text` (required), `color?`, `textColor?`
- **Usage**: `<Pill text="Draft" color="var(--color-yellow-500)" />`
- **When to use**: Tags, status indicators, categories

#### RSSIcon.astro
- **Purpose**: Monochrome, scalable RSS icon for feed links
- **Props**: None (self-contained)
- **Usage**: `<a href="/rss.xml"><RSSIcon /></a>`
- **When to use**: RSS feed links, feed discovery

#### BaseHead.astro
- **Purpose**: Centralized HTML head management with SEO optimization and theme management
- **Props**: `title` (required), `description?`, `image?`, `type?`, `pageType?`, `pubDate?`, `updatedDate?`, `tags?`
- **Usage**: `<BaseHead title="Page Title" description="..." />`
- **When to use**: Every page layout, for SEO and theme management

#### FormattedDate.astro
- **Purpose**: Date formatting with semantic markup
- **Props**: `date` (required), `format?` (optional)
- **Usage**: `<FormattedDate date={new Date()} />`
- **When to use**: Displaying dates in articles, notes, metadata

#### Grid.astro
- **Purpose**: CSS Grid layout component with responsive options
- **Props**: `columns?` (default: 2), `gap?` (default: 1rem)
- **Usage**: `<Grid columns={3}><div>Item 1</div><div>Item 2</div></Grid>`
- **When to use**: Layout content in grid format, photo galleries

#### Notion.astro
- **Purpose**: Notion page links with automatic title fetching
- **Props**: `url` (required), `title?` (optional override)
- **Usage**: `<Notion url="https://notion.so/page" />`
- **When to use**: Linking to Notion pages with rich previews

#### Loom.astro
- **Purpose**: Dedicated Loom video embed component
- **Props**: `id` (required), `className?` (optional)
- **Usage**: `<Loom id="video-id" />`
- **When to use**: Direct Loom video embeds (also used by Embed.astro)

#### Footer.astro
- **Purpose**: Site footer with social links and navigation
- **Props**: None (self-contained)
- **Usage**: `<Footer />`
- **When to use**: Site-wide footer layout

#### MainNavigation.astro
- **Purpose**: Primary site navigation with mobile menu
- **Props**: None (self-contained)
- **Usage**: `<MainNavigation />`
- **When to use**: Site-wide navigation header

#### Lightbox.astro
- **Purpose**: Image lightbox functionality for articles
- **Props**: None (self-contained, works with article images)
- **Usage**: Automatically enabled for article images
- **When to use**: Article image viewing (automatic)

#### NoteCard.astro
- **Purpose**: Note layout wrapper with metadata display
- **Props**: Note data (used in note layouts)
- **Usage**: Used in note page layouts
- **When to use**: Note page structure and metadata

#### NavLink.astro
- **Purpose**: Individual navigation links with active state
- **Props**: `href`, `children`, `className?`
- **Usage**: `<NavLink href="/about">About</NavLink>`
- **When to use**: Navigation menu items

#### Spinner.astro
- **Purpose**: Loading spinner for async operations
- **Props**: `size?` (optional)
- **Usage**: `<Spinner />` or `<Spinner size="large" />`
- **When to use**: Loading states, async operations

#### Social Icons (InstagramIcon, LinkedInIcon, NotionIcon, YouTubeIcon)
- **Purpose**: Social media icons for consistent branding
- **Props**: None (self-contained)
- **Usage**: `<InstagramIcon />`, `<LinkedInIcon />`, etc.
- **When to use**: Social media links, footer, contact pages


## Development Guidelines

### Component Structure

1. **File Organization**

   ```astro
   components/
   ├── layout/           # Layout and structural components
   │   ├── BaseHead.astro
   │   ├── Footer.astro
   │   ├── MainNavigation.astro
   │   ├── NoteCard.astro
   │   ├── Lightbox.astro
   │   └── index.ts      # Barrel exports
   ├── navigation/       # Navigation-specific components
   │   ├── NavLink.astro
   │   ├── ThemeToggle.astro
   │   └── index.ts      # Barrel exports
   ├── ui/              # Small, reusable UI utilities
   │   ├── FormattedDate.astro
   │   ├── Pill.astro
   │   ├── Spinner.astro
   │   └── index.ts      # Barrel exports
   ├── mdx/             # Components for MDX content
   │   ├── BookmarkCard.astro
   │   ├── Callout.astro
   │   ├── Embed.astro
   │   ├── Grid.astro
   │   ├── Loom.astro
   │   ├── Notion.astro
   │   └── index.ts      # Barrel exports
   ├── icons/           # Icon components
   │   ├── InstagramIcon.astro
   │   ├── LinkedInIcon.astro
   │   ├── NotionIcon.astro
   │   ├── RSSIcon.astro
   │   └── YouTubeIcon.astro
   └── index.ts         # Main component barrel
   ```

2. **Code Structure**

   ```astro
   ---
   // 1. Imports
   import { Image } from 'astro:assets';
   import type { Props } from './types';

   // 2. Props Interface
   export interface Props {
     required: string;
     optional?: number;
     withDefault?: boolean;
   }

   // 3. Props destructuring with defaults
   const { prop1, prop2, withDefault = true } = Astro.props;

   // 4. Data fetching with error handling (if needed)
   try {
     const data = await fetchData();
   } catch (error) {
     console.warn('Failed to fetch data:', error);
     // Implement fallback behavior
   }
   ---

   <!-- 5. Template with accessibility attributes -->
   <div class="component">
     <!-- Content -->
   </div>

   <!-- 6. Styles -->
   <style>
     :root {
       --component-background: var(--color-bg-dark-200);
       --component-foreground: var(--c-white);
       /* Other CSS variables */
     }

     /* Component styles */
   </style>
   ```

3. **Import Patterns**

   Use TypeScript path aliases for clean component imports:

   ```typescript
   // Category-specific barrel imports (recommended)
   import { BaseHead, Footer } from '@components/layout';
   import { FormattedDate, Pill } from '@components/ui';
   import { NavLink, ThemeToggle } from '@components/navigation';

   // Direct component imports
   import BaseHead from '@components/layout/BaseHead.astro';
   import Callout from '@components/mdx/Callout.astro';

   // MDX content imports (used in content files)
   import { Callout, Embed, BookmarkCard } from '@components/mdx';

   // Configuration and utility imports
   import { AUTHOR, TITLE_TEMPLATES } from '@config/seo';
   import { generatePageTitle, validateSEOData } from '@utils/seo';

   // Icon imports
   import RSSIcon from '@components/icons/RSSIcon.astro';
   ```

4. **Component Placement Guidelines**

   When creating new components, choose the appropriate category:

   - **Layout**: Components that define page structure or major sections
   - **Navigation**: Components specifically for site navigation
   - **UI**: Small, reusable utility components
   - **MDX**: Components intended for use in content files
   - **Icons**: SVG icon components

   After adding a component, update the relevant `index.ts` barrel export file.

### Error Handling

1. **Network Requests**

   - Always wrap external API calls in try-catch blocks
   - Provide meaningful fallback content
   - Log warnings for debugging without breaking the build
   - Example:
     ```typescript
     try {
       const result = await externalAPI(url);
       data = result.data;
     } catch (error) {
       console.warn(`Failed to fetch data from ${url}:`, error);
       data = fallbackData;
     }
     ```

2. **Graceful Degradation**
   - Provide optional props for manual overrides
   - Use sensible defaults
   - Ensure components work even when external services fail

### Props Interface

1. **TypeScript Definition**

   ```typescript
   export interface Props {
     required: string;
     optional?: number;
     withDefault?: boolean;
     title?: string; // Optional override for performance
   }
   ```

2. **Default Values**
   ```typescript
   const { required, optional, withDefault = true, title } = Astro.props;
   ```

### External Links

1. **Security & UX Requirements**

   - **Always use `target="_blank" rel="noopener noreferrer"` for external links** in manual HTML
   - Markdown external links are handled automatically via the `rehype-external-links` plugin
   - The `rel="noopener noreferrer"` prevents potential security vulnerabilities and performance issues
   - The `target="_blank"` ensures external links open in new tabs for better UX
   - Validate URLs when possible

2. **Implementation**

   ```astro
   <!-- ✅ Correct: Manual HTML external links -->
   <a href="https://example.com" target="_blank" rel="noopener noreferrer">External Link</a>

   <!-- ✅ Correct: Preserve rel="me" with target="_blank" for identity links -->
   <a href="https://social.example/@user" rel="me" target="_blank">Social Profile</a>

   <!-- ✅ Automatic: Markdown links are handled by rehype-external-links -->
   [External Link](mdc:https:/example.com)

   <!-- ❌ Incorrect: Missing security attributes -->
   <a href="https://example.com" target="_blank">External Link</a>
   ```

3. **Accessibility**
   - Add `aria-hidden="true"` to decorative icons
   - Ensure proper focus management
   - Use semantic HTML elements

### Styling

1. **CSS Variables and Theming**

   - **Global Theme Variables**: All semantic color variables are defined in `global.css` under the `@layer theme` section
   - **Component Variables**: Define component-specific variables in component `:root` when needed
   - **Theme Integration**: Components should use semantic variables from global.css rather than hardcoded colors
   - **No Media Queries in Components**: Theme switching is handled globally via `data-theme` attributes

   **Example of proper theming:**
   ```css
   /* In global.css - semantic variables */
   :root[data-theme='light'] {
     --color-nav-bg: var(--color-bg-dark-200);
     --color-nav-text: var(--color-brand-white);
   }

   :root[data-theme='dark'] {
     --color-nav-bg: var(--color-bg-light-200);
     --color-nav-text: var(--color-brand-black);
   }

   /* In component - use semantic variables */
   .component {
     background: var(--color-nav-bg);
     color: var(--color-nav-text);
   }
   ```

   **When to add new semantic variables:**
   - When a component needs different colors in light/dark modes
   - When the color has semantic meaning (e.g., `--color-nav-bg`, `--color-notecard-border`)
   - When the color is used across multiple components
   - Add them to the appropriate section in `global.css` under `@layer theme`

   **Variable naming convention:**
   - Use semantic names: `--color-{component}-{property}`
   - Examples: `--color-nav-bg`, `--color-notecard-border`, `--color-footer-text`
   - Group related variables together in `global.css`

2. **Modern CSS**

   - Use `inline-flex` for better alignment control
   - Implement smooth transitions for interactions
   - Use `currentColor` to inherit text color
   - Prefer `object-fit` for image sizing
   - Example:

     ```css
     .component {
       display: inline-flex;
       align-items: baseline;
       transition: opacity 0.2s ease;
     }

     .component:hover {
       opacity: var(--component-hover-opacity);
     }
     ```

3. **Responsive Design**

   - Use container queries when appropriate
   - Implement mobile-first layouts
   - Use clamp() for fluid typography
   - Example:

     ```css
     @container (width > 400px) {
       /* Desktop styles */
     }

     .title {
       font-size: clamp(1rem, calc(0.6rem + 1vw), 1.5rem);
     }
     ```

4. **Layout Patterns**
   - Use CSS Grid for complex layouts
   - Flexbox for alignment and spacing
   - Container queries for component-level responsiveness
   - Example:
     ```css
     .container {
       display: flex;
       justify-content: space-between;
       align-items: center;
     }
     ```

### Accessibility

1. **Semantic HTML**

   - Use appropriate elements (`<article>`, `<section>`, etc.)
   - Include ARIA attributes when needed
   - Support keyboard navigation
   - Maintain focus management

2. **Testing**
   - Test with screen readers
   - Verify keyboard access
   - Check color contrast
   - Validate ARIA usage

## Best Practices

1. **Performance**

   - Minimize JavaScript
   - Optimize images with proper dimensions
   - Lazy load when appropriate
   - Monitor bundle size
   - Provide manual overrides to skip expensive operations

2. **Maintenance**

   - Write clear documentation
   - Include usage examples
   - Add prop validation
   - Handle edge cases
   - Implement proper error handling

3. **Documentation**
   - Purpose and usage
   - Props and types
   - Examples and demos
   - Accessibility notes
   - Error handling behavior

### SEO Development Guidelines

1. **Centralized Configuration**

   - All SEO constants live in `src/config/seo.ts`
   - Update personal branding, job titles, and descriptions in one place
   - Title templates ensure consistent formatting across page types
   - Schema.org structured data configured centrally

2. **Utility Functions**

   - Use functions from `src/utils/seo.ts` for all SEO metadata generation
   - Functions are pure, testable, and handle edge cases
   - Consistent branding applied automatically
   - Proper validation and sanitization of input data

3. **SEO Best Practices**

   ```typescript
   // ✅ Good: Use centralized configuration
   import { generatePageTitle, validateSEOData } from '@utils/seo';
   const seoData = validateSEOData(Astro.props);
   const title = generatePageTitle(seoData.title, seoData.pageType);

   // ❌ Bad: Manual SEO generation
   const title = `${props.title} | Danny Smith`;
   ```

4. **Page Type Guidelines**

   - Use `pageType="article"` for long-form content
   - Use `pageType="note"` for short-form content
   - Use `pageType="page"` for static pages
   - Omit `pageType` for homepage or custom titles

5. **Content-Specific SEO**

   - Articles and notes automatically get article-specific meta tags
   - Publication and modification dates included when provided
   - Tags become keywords for better search indexing
   - Custom OG images supported with automatic fallbacks

## Development Guidelines
