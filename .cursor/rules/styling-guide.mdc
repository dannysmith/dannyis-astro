---
description: Guide to visual styling and CSS Architecture
globs:
alwaysApply: false
---

# Styling Guide

## Visual Design Style

### Color System

### Typography

## CSS Organization

- Global styles in `src/styles/`
- Component-scoped styles in `.astro` files

## CSS Layers

Our CSS is organized into layers to manage specificity and cascade order. The layers are defined in order of increasing specificity:

1. **Reset Layer** (`@layer reset`)

   - Basic resets and normalizations
   - Box model, margins, paddings
   - Default element behaviors
   - Located in `src/styles/global.css`

2. **Base Layer** (`@layer base`)

   - Default element styles
   - Typography fundamentals
   - Basic layout patterns
   - Located in `src/styles/global.css`

3. **Prose Layer** (`@layer prose`)

   - Content styling for non-Articles
   - Mainly typography
   - Located in `src/styles/global.css`

4. **Article Layer** (`@layer articletypography`)

   - Content styling Articles
   - Mainly typography
   - Located as a globally-scoped style in `src/layouts/BlogPost.astro`

5. **Theme Layer** (`@layer theme`)
   - Color scheme preferences
   - Dark/light mode overrides
   - Located in `src/styles/global.css`

### Layer Usage Guidelines

1. Keep styles in their appropriate layer
2. Use later layers to override earlier ones
3. Avoid using `!important` - use layers instead
4. Component-scoped styles are outside layers
5. Custom properties (CSS variables) should be defined outside layers

Example of layer usage:

```css
@layer base {
  a {
    color: var(--prose-link-color);
  }
}

@layer prose {
  .prose a {
    color: var(--prose-link-color);
    text-decoration: underline;
  }
}
```

## Component Styling

Example of component-scoped styles:

```astro
---
// Component logic
---
<div class="component">
  <!-- Content -->
</div>

<style>
  .component {
    /* Scoped styles */
  }
</style>
```

## CSS Variables

Define all global variables in `src/styles/global.css`:

```css
:root {
  --color-primary: #007bff;
  --color-secondary: #6c757d;
  --spacing-unit: 1rem;
}
```

Variables used by a single component should be defined there. If they are likeley to be updated globally by the browser (eg flipping a dark-mode switch), define them on `:root` in the global scope.

## Best Practices

1. Use scoped styles when possible
2. Follow BEM-like naming conventions
3. Use CSS variables for theming
4. Keep styles modular
5. Use fluid/responsive design patterns
6. Use modern CSS
7. Prefer CSS Grid over Flexbox unless flexbox is obviously simpler.
8. Think like a designer and CSS expert when writing CSS.
