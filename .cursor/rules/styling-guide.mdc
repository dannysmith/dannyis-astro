---
description: Guide to visual styling and CSS Architecture
globs:
alwaysApply: false
---

# Styling Guide

## Core Principles

1. Use scoped styles when possible
2. Follow BEM-like naming conventions
3. Use CSS variables for theming
4. Keep styles modular
5. Use fluid/responsive design patterns
6. Use modern CSS features
7. Prefer CSS Grid over Flexbox unless flexbox is obviously simpler
8. Think like a designer when writing CSS

> **Note**: For comprehensive design philosophy, visual style, and brand guidelines, see `design-and-brand-guidelines.md`. This document focuses on technical CSS implementation.

## CSS Organization

- Global styles in `src/styles/`
- Component-scoped styles in `.astro` files
- CSS variables defined in `:root` in `global.css`

## CSS Layers

Our CSS is organized into layers (in order of increasing specificity):

1. **Reset** (`@layer reset`): Basic resets, box model, margins
2. **Base** (`@layer base`): Default element styles, typography
3. **Prose** (`@layer prose`): Article and content styling
4. **Theme** (`@layer theme`): Color schemes, dark/light mode

### Layer Guidelines

- Keep styles in appropriate layers
- Use later layers to override earlier ones
- Avoid `!important` - use layers instead
- Component styles live outside layers
- CSS variables defined outside layers

```css
@layer base {
  a {
    color: var(--prose-link-color);
  }
}
@layer prose {
  .prose a {
    text-decoration: underline;
  }
}
```

## Container Queries

Use container queries for component-level responsiveness (vs media queries for page-level layout).

### Quick Start

```html
<div class="cq">
  <!-- or container-type: inline-size -->
  <div class="component">
    <!-- Content -->
  </div>
</div>

<style>
  @container (width > 400px) {
    .component {
      /* Wider container styles */
    }
  }
</style>
```

### Best Practices

1. Use for component-level responsiveness
2. Set meaningful breakpoints (400px, 800px common)
3. Use relative units (rem, em) for breakpoints
4. Test in various container sizes

## Component Styling

```astro
<div class="component">
  <!-- Content -->
</div>

<style>
  .component {
    /* Scoped styles */
  }
</style>
```

## Theme System and CSS Variables

### Theme Architecture

The site uses a comprehensive theme system with three modes:
- **Auto**: Follows system preference (`prefers-color-scheme`)
- **Light**: Explicit light theme
- **Dark**: Explicit dark theme

Theme switching is handled via `data-theme` attributes on the `:root` element, managed by the global theme system.

### CSS Variable Structure

#### 1. Base Color Palette
```css
:root {
  /* Base color tokens - never used directly in components */
  --color-red-500: #ff7369;
  --color-blue-500: #529cca;
  /* ... other base colors */
}
```

#### 2. Semantic Variables
```css
/* In global.css under @layer theme */
:root[data-theme='light'] {
  --color-nav-bg: var(--color-bg-dark-200);
  --color-nav-text: var(--color-brand-white);
  --color-notecard-bg: var(--color-brand-white);
  /* ... other semantic variables */
}

:root[data-theme='dark'] {
  --color-nav-bg: var(--color-bg-light-200);
  --color-nav-text: var(--color-brand-black);
  --color-notecard-bg: var(--color-bg-secondary);
  /* ... other semantic variables */
}
```

#### 3. Component Variables
```css
/* In component styles */
:root {
  --component-specific-var: var(--color-nav-bg);
}
```

### Variable Organization in global.css

1. **Base Colors** (outside layers): Raw color tokens
2. **Semantic Variables** (`@layer theme`): Component-specific variables that change between themes
3. **Component Variables** (in components): Component-specific overrides when needed

### Adding New Theme Variables

When a component needs different colors in light/dark modes:

1. **Add semantic variables to global.css:**
   ```css
   /* In @layer theme section */
   :root[data-theme='light'] {
     --color-your-component-bg: var(--color-bg-light-200);
     --color-your-component-text: var(--color-text-primary);
   }

   :root[data-theme='dark'] {
     --color-your-component-bg: var(--color-bg-dark-200);
     --color-your-component-text: var(--color-text-primary);
   }
   ```

2. **Use in component:**
   ```css
   .your-component {
     background: var(--color-your-component-bg);
     color: var(--color-your-component-text);
   }
   ```

### Best Practices

- **Never use base colors directly** in components - always use semantic variables
- **Group related variables** together in global.css (e.g., all nav variables together)
- **Use descriptive names** that indicate the component and property
- **Test both themes** when adding new variables
- **Follow the naming convention**: `--color-{component}-{property}`
