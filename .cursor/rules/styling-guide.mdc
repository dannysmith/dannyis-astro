---
description: Guide to visual styling and CSS Architecture
globs:
alwaysApply: false
---

# Styling Guide

## Core Principles

1. Use scoped styles when possible
2. Follow BEM-like naming conventions
3. Use CSS variables for theming
4. Keep styles modular
5. Use fluid/responsive design patterns
6. Use modern CSS features
7. Prefer CSS Grid over Flexbox unless flexbox is obviously simpler
8. Think like a designer when writing CSS

## CSS Organization

- Global styles in `src/styles/`
- Component-scoped styles in `.astro` files
- CSS variables defined in `:root` in `global.css`

## CSS Layers

Our CSS is organized into layers (in order of increasing specificity):

1. **Reset** (`@layer reset`): Basic resets, box model, margins
2. **Base** (`@layer base`): Default element styles, typography
3. **Prose** (`@layer prose`): Article and content styling
4. **Theme** (`@layer theme`): Color schemes, dark/light mode

### Layer Guidelines

- Keep styles in appropriate layers
- Use later layers to override earlier ones
- Avoid `!important` - use layers instead
- Component styles live outside layers
- CSS variables defined outside layers

```css
@layer base {
  a {
    color: var(--prose-link-color);
  }
}
@layer prose {
  .prose a {
    text-decoration: underline;
  }
}
```

## Container Queries

Use container queries for component-level responsiveness (vs media queries for page-level layout).

### Quick Start

```html
<div class="cq">
  <!-- or container-type: inline-size -->
  <div class="component">
    <!-- Content -->
  </div>
</div>

<style>
  @container (width > 400px) {
    .component {
      /* Wider container styles */
    }
  }
</style>
```

### Best Practices

1. Use for component-level responsiveness
2. Set meaningful breakpoints (400px, 800px common)
3. Use relative units (rem, em) for breakpoints
4. Test in various container sizes

## Component Styling

```astro
<div class="component">
  <!-- Content -->
</div>

<style>
  .component {
    /* Scoped styles */
  }
</style>
```

## CSS Variables

```css
:root {
  --color-primary: #007bff;
  --spacing-unit: 1rem;
}
```

- Global variables in `global.css`
- Component-specific variables in component
- Theme variables on `:root` for browser updates
