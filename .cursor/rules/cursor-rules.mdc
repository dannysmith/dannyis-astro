---
description: Main index of Cursor rules and guidelines
globs: ['**/*']
alwaysApply: true
---

# Cursor Rules and Guidelines

This document serves as an index for all cursor rules and guidelines for the personal website project.

## Available Rules

### Project Structure

[project-structure.mdc](mdc:.cursor/rules/project-structure.mdc)

- **File**: `project-structure.mdc`
- **Description**: Defines the organization and architecture of the personal website built with Astro
- **Key Topics**:
  - Directory structure
  - Content organization
  - Component organization
  - Technical implementation
  - Best practices

### Component Guidelines

[component-guidelines.mdc](mdc:.cursor/rules/component-guidelines.mdc)

- **File**: `component-guidelines.md`
- **Description**: Guidelines for developing and maintaining Astro components
- **Key Topics**:
  - Component types and organization
  - Development guidelines
  - Props interface
  - Styling patterns and theme integration
  - Accessibility
  - Best practices

### Styling Guide

[styling-guide.mdc](mdc:.cursor/rules/styling-guide.mdc)

- **File**: `styling-guide.mdc`
- **Description**: Guidelines for visual styling and CSS architecture
- **Key Topics**:
  - Theme system and CSS variables
  - Color system and semantic variables
  - CSS organization and layers
  - Component styling patterns
  - Best practices for theming

### Design and Brand Guidelines

[design-and-brand-guidelines.mdc](mdc:.cursor/rules/design-and-brand-guidelines.mdc)

- **File**: `design-and-brand-guidelines.mdc`
- **Description**: Comprehensive design philosophy, visual style, and brand identity guidelines
- **Key Topics**:
  - Site purpose and philosophy
  - Visual design philosophy
  - Typography system
  - Color system
  - Layout principles
  - Component design philosophy
  - Brand expression

### Astro Guidelines

[astro-guidelines.mdc](mdc:.cursor/rules/astro-guidelines.mdc)

- **File**: `astro-guidelines.mdc`
- **Description**: Specific guidelines for working with Astro features
- **Key Topics**:
  - Core principles
  - Component guidelines
  - Content collections
  - Image handling
  - Performance guidelines
  - SEO guidelines
  - Error handling

### Task Management

[task-list.mdc](mdc:.cursor/rules/task-list.mdc)

- **File**: `task-list.mdc`
- **Description**: Guidelines for creating and managing task lists
- **Key Topics**:
  - Task list creation
  - Task maintenance
  - AI instructions
  - Best practices

### Commit Messages

[commit-messages.mdc](mdc:.cursor/rules/commit-messages.mdc)

- **File**: `commit-messages.mdc`
- **Description**: Guidelines for writing clear and consistent commit messages
- **Key Topics**:
  - Message format
  - Commit types
  - Subject and body guidelines
  - Best practices
  - Examples

### Definition of Ready & Done

[dor-dod.mdc](mdc:.cursor/rules/dor-dod.mdc)

- **File**: `dor-dod.mdc`
- **Description**: Defines the criteria for when a task is ready to be worked on (DoR) and when it is considered complete (DoD). Ensures quality, clarity, and accountability throughout the development process. Projects should extend or override these criteria as needed.

### Feature Planning Process

[planning-process-overview.mdc](mdc:.cursor/rules/planning-process/planning-process-overview.mdc)

- **File**: `planning-process/planning-process-overview.mdc`
- **Description**: Outlines the structured, multi-step planning process required before implementing new features or major changes. This process includes idea analysis, PRD creation, critical review, system architecture planning, documentation updates, detailed task planning, and test planning. Each step is designed to ensure thorough analysis, documentation, and review, resulting in clear, actionable plans and reduced project risk. The process is collaborative and leverages both AI and human expertise to ensure high-quality outcomes.

## How to Use

1. **For Development**:

   - Follow the project structure guidelines when creating new files
   - Adhere to component guidelines when building new components
   - Use the styling guide for consistent visual design
   - Follow content management rules for adding new content
   - Reference Astro guidelines for framework-specific features
   - Use task lists to track progress
   - Follow commit message guidelines for version control

2. **For AI Assistance**:
   - AI will use these rules to provide consistent and accurate assistance
   - Rules help maintain project standards and best practices
   - Guidelines ensure proper implementation of features
   - Task lists help track and manage project progress
   - Commit messages will follow the defined format

## Adding New Rules

1. Create a new markdown file in the `.cursor/rules` directory
2. Follow the existing format and structure
3. Update this index to include the new rule
4. Ensure the rule is properly documented and maintained

## Maintenance

- Keep rules up to date with project changes
- Review and update guidelines regularly
- Ensure consistency across all rules
- Remove outdated or irrelevant rules
- Add new rules as needed

---

## Styleguide/Test Pages

The project includes three styleguide/test pages to ensure visual consistency and comprehensive coverage of all key components, markdown features, and prose styles:

- **Main Styleguide:**

  - **Location:** `/src/pages/styleguide.astro`
  - **Purpose:** Exhaustive visual testbed for all reusable components (Astro/MDX).
  - **Usage:**
    - When adding a new reusable component, always add a demo/example to this page.
    - Use realistic content and context for each component.
    - Routable at `/styleguide` (only linked in dev).

- **Note Styleguide:**

  - **Location:** `/src/content/notes/note-styleguide.mdx`
  - **Purpose:** Representative test of all markdown, MDX, and prose features in a "note" context.
  - **Usage:**
    - If you add a component or markdown feature likely to be used in notes, add an example here.
    - Use realistic, long-form content and context.

- **Article Styleguide:**
  - **Location:** `/src/content/articles/article-styleguide.mdx`
  - **Purpose:** Representative test of all markdown, MDX, and prose features in an "article" context.
  - **Usage:**
    - If you add a component or markdown feature likely to be used in articles, add an example here.
    - Use realistic, long-form content and context.

**Exclusion from Indexes:**
All styleguide files use `styleguide: true` in their frontmatter. Content collection queries and RSS feeds are configured to exclude these files from public indexes.

**Best Practices:**

- Keep styleguides up to date with new components and features.
- Use realistic, varied content for visual QA.
- Reference styleguides before launch to ensure visual and typographic consistency.
- If adding a new markdown/MDX feature, ensure it is demonstrated in both note and article styleguides.
- The main styleguide should be exhaustive; the note and article styleguides should be representative but realistic.
